// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: buttplug_rs_ffi.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Buttplug {

  /// <summary>Holder for reflection information generated from buttplug_rs_ffi.proto</summary>
  public static partial class ButtplugRsFfiReflection {

    #region Descriptor
    /// <summary>File descriptor for buttplug_rs_ffi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ButtplugRsFfiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVidXR0cGx1Z19yc19mZmkucHJvdG8SCEJ1dHRwbHVnIu4HCg1DbGllbnRN",
            "ZXNzYWdlEgoKAmlkGAEgASgNEjMKB21lc3NhZ2UYAiABKAsyIi5CdXR0cGx1",
            "Zy5DbGllbnRNZXNzYWdlLkZGSU1lc3NhZ2UavQEKDENvbm5lY3RMb2NhbBIT",
            "CgtzZXJ2ZXJfbmFtZRgBIAEoCRIVCg1tYXhfcGluZ190aW1lGAIgASgNEhoK",
            "EmFsbG93X3Jhd19tZXNzYWdlcxgDIAEoCBIhChlkZXZpY2VfY29uZmlndXJh",
            "dGlvbl9qc29uGAQgASgJEiYKHnVzZXJfZGV2aWNlX2NvbmZpZ3VyYXRpb25f",
            "anNvbhgFIAEoCRIaChJjb21tX21hbmFnZXJfdHlwZXMYBiABKA0aRQoQQ29u",
            "bmVjdFdlYnNvY2tldBIPCgdhZGRyZXNzGAEgASgJEiAKGGJ5cGFzc19jZXJ0",
            "X3ZlcmlmaWNhdGlvbhgCIAEoCBoPCg1TdGFydFNjYW5uaW5nGg4KDFN0b3BT",
            "Y2FubmluZxoQCg5TdG9wQWxsRGV2aWNlcxoMCgpEaXNjb25uZWN0GgYKBFBp",
            "bmcaxQMKCkZGSU1lc3NhZ2USPQoNY29ubmVjdF9sb2NhbBgBIAEoCzIkLkJ1",
            "dHRwbHVnLkNsaWVudE1lc3NhZ2UuQ29ubmVjdExvY2FsSAASRQoRY29ubmVj",
            "dF93ZWJzb2NrZXQYAiABKAsyKC5CdXR0cGx1Zy5DbGllbnRNZXNzYWdlLkNv",
            "bm5lY3RXZWJzb2NrZXRIABI/Cg5zdGFydF9zY2FubmluZxgDIAEoCzIlLkJ1",
            "dHRwbHVnLkNsaWVudE1lc3NhZ2UuU3RhcnRTY2FubmluZ0gAEj0KDXN0b3Bf",
            "c2Nhbm5pbmcYBCABKAsyJC5CdXR0cGx1Zy5DbGllbnRNZXNzYWdlLlN0b3BT",
            "Y2FubmluZ0gAEkIKEHN0b3BfYWxsX2RldmljZXMYBSABKAsyJi5CdXR0cGx1",
            "Zy5DbGllbnRNZXNzYWdlLlN0b3BBbGxEZXZpY2VzSAASOAoKZGlzY29ubmVj",
            "dBgGIAEoCzIiLkJ1dHRwbHVnLkNsaWVudE1lc3NhZ2UuRGlzY29ubmVjdEgA",
            "EiwKBHBpbmcYByABKAsyHC5CdXR0cGx1Zy5DbGllbnRNZXNzYWdlLlBpbmdI",
            "AEIFCgNtc2cigwEKH0RldmljZUNvbW11bmljYXRpb25NYW5hZ2VyVHlwZXMS",
            "BwoDQWxsEAASDAoIQnRsZXBsdWcQARIKCgZYSW5wdXQQAhIOCgpTZXJpYWxQ",
            "b3J0EAQSFAoQTG92ZW5zZUhJRERvbmdsZRAIEhcKE0xvdmVuc2VTZXJpYWxE",
            "b25nbGUQECL+CwoNRGV2aWNlTWVzc2FnZRIKCgJpZBgBIAEoDRINCgVpbmRl",
            "eBgCIAEoDRIzCgdtZXNzYWdlGAMgASgLMiIuQnV0dHBsdWcuRGV2aWNlTWVz",
            "c2FnZS5GRklNZXNzYWdlGjAKEFZpYnJhdGVDb21wb25lbnQSDQoFaW5kZXgY",
            "ASABKA0SDQoFc3BlZWQYAiABKAEaRgoKVmlicmF0ZUNtZBI4CgZzcGVlZHMY",
            "ASADKAsyKC5CdXR0cGx1Zy5EZXZpY2VNZXNzYWdlLlZpYnJhdGVDb21wb25l",
            "bnQaQgoPUm90YXRlQ29tcG9uZW50Eg0KBWluZGV4GAEgASgNEg0KBXNwZWVk",
            "GAIgASgBEhEKCWNsb2Nrd2lzZRgDIAEoCBpHCglSb3RhdGVDbWQSOgoJcm90",
            "YXRpb25zGAEgAygLMicuQnV0dHBsdWcuRGV2aWNlTWVzc2FnZS5Sb3RhdGVD",
            "b21wb25lbnQaRAoPTGluZWFyQ29tcG9uZW50Eg0KBWluZGV4GAEgASgNEhAK",
            "CGR1cmF0aW9uGAIgASgNEhAKCHBvc2l0aW9uGAMgASgBGkcKCUxpbmVhckNt",
            "ZBI6Cgltb3ZlbWVudHMYASADKAsyJy5CdXR0cGx1Zy5EZXZpY2VNZXNzYWdl",
            "LkxpbmVhckNvbXBvbmVudBoPCg1TdG9wRGV2aWNlQ21kGmoKClJhd1JlYWRD",
            "bWQSJAoIZW5kcG9pbnQYASABKA4yEi5CdXR0cGx1Zy5FbmRwb2ludBIMCgRk",
            "YXRhGAIgASgMEhcKD2V4cGVjdGVkX2xlbmd0aBgDIAEoDRIPCgd0aW1lb3V0",
            "GAQgASgNGl4KC1Jhd1dyaXRlQ21kEiQKCGVuZHBvaW50GAEgASgOMhIuQnV0",
            "dHBsdWcuRW5kcG9pbnQSDAoEZGF0YRgCIAEoDBIbChN3cml0ZV93aXRoX3Jl",
            "c3BvbnNlGAMgASgIGjcKD1Jhd1N1YnNjcmliZUNtZBIkCghlbmRwb2ludBgB",
            "IAEoDjISLkJ1dHRwbHVnLkVuZHBvaW50GjkKEVJhd1Vuc3Vic2NyaWJlQ21k",
            "EiQKCGVuZHBvaW50GAEgASgOMhIuQnV0dHBsdWcuRW5kcG9pbnQaEQoPQmF0",
            "dGVyeUxldmVsQ21kGg4KDFJTU0lMZXZlbENtZBqSBQoKRkZJTWVzc2FnZRI5",
            "Cgt2aWJyYXRlX2NtZBgBIAEoCzIiLkJ1dHRwbHVnLkRldmljZU1lc3NhZ2Uu",
            "VmlicmF0ZUNtZEgAEjcKCnJvdGF0ZV9jbWQYAiABKAsyIS5CdXR0cGx1Zy5E",
            "ZXZpY2VNZXNzYWdlLlJvdGF0ZUNtZEgAEjcKCmxpbmVhcl9jbWQYAyABKAsy",
            "IS5CdXR0cGx1Zy5EZXZpY2VNZXNzYWdlLkxpbmVhckNtZEgAEkAKD3N0b3Bf",
            "ZGV2aWNlX2NtZBgEIAEoCzIlLkJ1dHRwbHVnLkRldmljZU1lc3NhZ2UuU3Rv",
            "cERldmljZUNtZEgAEjoKDHJhd19yZWFkX2NtZBgFIAEoCzIiLkJ1dHRwbHVn",
            "LkRldmljZU1lc3NhZ2UuUmF3UmVhZENtZEgAEjwKDXJhd193cml0ZV9jbWQY",
            "BiABKAsyIy5CdXR0cGx1Zy5EZXZpY2VNZXNzYWdlLlJhd1dyaXRlQ21kSAAS",
            "RAoRcmF3X3N1YnNjcmliZV9jbWQYByABKAsyJy5CdXR0cGx1Zy5EZXZpY2VN",
            "ZXNzYWdlLlJhd1N1YnNjcmliZUNtZEgAEkgKE3Jhd191bnN1YnNjcmliZV9j",
            "bWQYCCABKAsyKS5CdXR0cGx1Zy5EZXZpY2VNZXNzYWdlLlJhd1Vuc3Vic2Ny",
            "aWJlQ21kSAASRAoRYmF0dGVyeV9sZXZlbF9jbWQYCSABKAsyJy5CdXR0cGx1",
            "Zy5EZXZpY2VNZXNzYWdlLkJhdHRlcnlMZXZlbENtZEgAEj4KDnJzc2lfbGV2",
            "ZWxfY21kGAogASgLMiQuQnV0dHBsdWcuRGV2aWNlTWVzc2FnZS5SU1NJTGV2",
            "ZWxDbWRIAEIFCgNtc2ci2AkKDVNlcnZlck1lc3NhZ2USKAoCb2sYASABKAsy",
            "Gi5CdXR0cGx1Zy5TZXJ2ZXJNZXNzYWdlLk9rSAASLgoFZXJyb3IYAiABKAsy",
            "HS5CdXR0cGx1Zy5TZXJ2ZXJNZXNzYWdlLkVycm9ySAASRQoRc2Nhbm5pbmdf",
            "ZmluaXNoZWQYAyABKAsyKC5CdXR0cGx1Zy5TZXJ2ZXJNZXNzYWdlLlNjYW5u",
            "aW5nRmluaXNoZWRIABI7CgxkZXZpY2VfYWRkZWQYBCABKAsyIy5CdXR0cGx1",
            "Zy5TZXJ2ZXJNZXNzYWdlLkRldmljZUFkZGVkSAASPwoOZGV2aWNlX3JlbW92",
            "ZWQYBSABKAsyJS5CdXR0cGx1Zy5TZXJ2ZXJNZXNzYWdlLkRldmljZVJlbW92",
            "ZWRIABI4CgpkaXNjb25uZWN0GAYgASgLMiIuQnV0dHBsdWcuU2VydmVyTWVz",
            "c2FnZS5EaXNjb25uZWN0SAAavwEKEU1lc3NhZ2VBdHRyaWJ1dGVzEkIKDG1l",
            "c3NhZ2VfdHlwZRgBIAEoDjIsLkJ1dHRwbHVnLlNlcnZlck1lc3NhZ2UuTWVz",
            "c2FnZUF0dHJpYnV0ZVR5cGUSFQoNZmVhdHVyZV9jb3VudBgCIAEoDRISCgpz",
            "dGVwX2NvdW50GAMgAygNEiUKCWVuZHBvaW50cxgEIAMoDjISLkJ1dHRwbHVn",
            "LkVuZHBvaW50EhQKDG1heF9kdXJhdGlvbhgFIAMoDRoECgJPaxpqCgVFcnJv",
            "chI9CgplcnJvcl90eXBlGAEgASgOMikuQnV0dHBsdWcuU2VydmVyTWVzc2Fn",
            "ZS5CdXR0cGx1Z0Vycm9yVHlwZRIPCgdtZXNzYWdlGAIgASgJEhEKCWJhY2t0",
            "cmFjZRgDIAEoCRoSChBTY2FubmluZ0ZpbmlzaGVkGnEKC0RldmljZUFkZGVk",
            "EgwKBG5hbWUYASABKAkSDQoFaW5kZXgYAiABKA0SRQoSbWVzc2FnZV9hdHRy",
            "aWJ1dGVzGAMgAygLMikuQnV0dHBsdWcuU2VydmVyTWVzc2FnZS5NZXNzYWdl",
            "QXR0cmlidXRlcxoeCg1EZXZpY2VSZW1vdmVkEg0KBWluZGV4GAEgASgNGgwK",
            "CkRpc2Nvbm5lY3QirwEKEUJ1dHRwbHVnRXJyb3JUeXBlEhoKFkJ1dHRwbHVn",
            "Q29ubmVjdG9yRXJyb3IQABIaChZCdXR0cGx1Z0hhbmRzaGFrZUVycm9yEAES",
            "FwoTQnV0dHBsdWdEZXZpY2VFcnJvchACEhUKEUJ1dHRwbHVnUGluZ0Vycm9y",
            "EAMSGAoUQnV0dHBsdWdNZXNzYWdlRXJyb3IQBBIYChRCdXR0cGx1Z1Vua25v",
            "d25FcnJvchAFIssBChRNZXNzYWdlQXR0cmlidXRlVHlwZRIOCgpWaWJyYXRl",
            "Q21kEAASDQoJUm90YXRlQ21kEAESDQoJTGluZWFyQ21kEAISEQoNU3RvcERl",
            "dmljZUNtZBADEg4KClJhd1JlYWRDbWQQBBIPCgtSYXdXcml0ZUNtZBAFEhMK",
            "D1Jhd1N1YnNjcmliZUNtZBAGEhUKEVJhd1Vuc3Vic2NyaWJlQ21kEAcSEwoP",
            "QmF0dGVyeUxldmVsQ21kEAgSEAoMUlNTSUxldmVsQ21kEAlCBQoDbXNnIvAD",
            "CgtEZXZpY2VFdmVudBI2CgpkaXNjb25uZWN0GAEgASgLMiAuQnV0dHBsdWcu",
            "RGV2aWNlRXZlbnQuRGlzY29ubmVjdEgAEkoKFWJhdHRlcnlfbGV2ZWxfcmVh",
            "ZGluZxgCIAEoCzIpLkJ1dHRwbHVnLkRldmljZUV2ZW50LkJhdHRlcnlMZXZl",
            "bFJlYWRpbmdIABJEChJyc3NpX2xldmVsX3JlYWRpbmcYAyABKAsyJi5CdXR0",
            "cGx1Zy5EZXZpY2VFdmVudC5SU1NJTGV2ZWxSZWFkaW5nSAASNwoLcmF3X3Jl",
            "YWRpbmcYBCABKAsyIC5CdXR0cGx1Zy5EZXZpY2VFdmVudC5SYXdSZWFkaW5n",
            "SAAaGwoKRGlzY29ubmVjdBINCgVpbmRleBgBIAEoDRpPCgpSYXdSZWFkaW5n",
            "Eg0KBWluZGV4GAEgASgNEiQKCGVuZHBvaW50GAIgASgOMhIuQnV0dHBsdWcu",
            "RW5kcG9pbnQSDAoEZGF0YRgDIAEoDBo1ChNCYXR0ZXJ5TGV2ZWxSZWFkaW5n",
            "Eg0KBWluZGV4GAEgASgNEg8KB3JlYWRpbmcYAiABKAEaMgoQUlNTSUxldmVs",
            "UmVhZGluZxINCgVpbmRleBgBIAEoDRIPCgdyZWFkaW5nGAIgASgFQgUKA21z",
            "ZyLdAQoYQnV0dHBsdWdGRklTZXJ2ZXJNZXNzYWdlEgoKAmlkGAEgASgNEj4K",
            "B21lc3NhZ2UYAiABKAsyLS5CdXR0cGx1Zy5CdXR0cGx1Z0ZGSVNlcnZlck1l",
            "c3NhZ2UuRkZJTWVzc2FnZRp1CgpGRklNZXNzYWdlEjEKDnNlcnZlcl9tZXNz",
            "YWdlGAEgASgLMhcuQnV0dHBsdWcuU2VydmVyTWVzc2FnZUgAEi0KDGRldmlj",
            "ZV9ldmVudBgCIAEoCzIVLkJ1dHRwbHVnLkRldmljZUV2ZW50SABCBQoDbXNn",
            "KpMFCghFbmRwb2ludBILCgdDb21tYW5kEAASDAoIRmlybXdhcmUQARIGCgJS",
            "eBACEgsKB1J4QWNjZWwQAxIQCgxSeEJMRUJhdHRlcnkQBBIOCgpSeFByZXNz",
            "dXJlEAUSCwoHUnhUb3VjaBAGEgYKAlR4EAcSCgoGVHhNb2RlEAgSCwoHVHhT",
            "aG9jaxAJEg0KCVR4VmlicmF0ZRAKEhMKD1R4VmVuZG9yQ29udHJvbBALEg0K",
            "CVdoaXRlbGlzdBAMEgwKCEdlbmVyaWMwEA0SDAoIR2VuZXJpYzEQDhIMCghH",
            "ZW5lcmljMhAPEgwKCEdlbmVyaWMzEBASDAoIR2VuZXJpYzQQERIMCghHZW5l",
            "cmljNRASEgwKCEdlbmVyaWM2EBMSDAoIR2VuZXJpYzcQFBIMCghHZW5lcmlj",
            "OBAVEgwKCEdlbmVyaWM5EBYSDQoJR2VuZXJpYzEwEBcSDQoJR2VuZXJpYzEx",
            "EBgSDQoJR2VuZXJpYzEyEBkSDQoJR2VuZXJpYzEzEBoSDQoJR2VuZXJpYzE0",
            "EBsSDQoJR2VuZXJpYzE1EBwSDQoJR2VuZXJpYzE2EB0SDQoJR2VuZXJpYzE3",
            "EB4SDQoJR2VuZXJpYzE4EB8SDQoJR2VuZXJpYzE5ECASDQoJR2VuZXJpYzIw",
            "ECESDQoJR2VuZXJpYzIxECISDQoJR2VuZXJpYzIyECMSDQoJR2VuZXJpYzIz",
            "ECQSDQoJR2VuZXJpYzI0ECUSDQoJR2VuZXJpYzI1ECYSDQoJR2VuZXJpYzI2",
            "ECcSDQoJR2VuZXJpYzI3ECgSDQoJR2VuZXJpYzI4ECkSDQoJR2VuZXJpYzI5",
            "ECoSDQoJR2VuZXJpYzMwECsSDQoJR2VuZXJpYzMxECxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Buttplug.Endpoint), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage), global::Buttplug.ClientMessage.Parser, new[]{ "Id", "Message" }, null, new[]{ typeof(global::Buttplug.ClientMessage.Types.DeviceCommunicationManagerTypes) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage.Types.ConnectLocal), global::Buttplug.ClientMessage.Types.ConnectLocal.Parser, new[]{ "ServerName", "MaxPingTime", "AllowRawMessages", "DeviceConfigurationJson", "UserDeviceConfigurationJson", "CommManagerTypes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage.Types.ConnectWebsocket), global::Buttplug.ClientMessage.Types.ConnectWebsocket.Parser, new[]{ "Address", "BypassCertVerification" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage.Types.StartScanning), global::Buttplug.ClientMessage.Types.StartScanning.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage.Types.StopScanning), global::Buttplug.ClientMessage.Types.StopScanning.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage.Types.StopAllDevices), global::Buttplug.ClientMessage.Types.StopAllDevices.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage.Types.Disconnect), global::Buttplug.ClientMessage.Types.Disconnect.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage.Types.Ping), global::Buttplug.ClientMessage.Types.Ping.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ClientMessage.Types.FFIMessage), global::Buttplug.ClientMessage.Types.FFIMessage.Parser, new[]{ "ConnectLocal", "ConnectWebsocket", "StartScanning", "StopScanning", "StopAllDevices", "Disconnect", "Ping" }, new[]{ "Msg" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage), global::Buttplug.DeviceMessage.Parser, new[]{ "Id", "Index", "Message" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.VibrateComponent), global::Buttplug.DeviceMessage.Types.VibrateComponent.Parser, new[]{ "Index", "Speed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.VibrateCmd), global::Buttplug.DeviceMessage.Types.VibrateCmd.Parser, new[]{ "Speeds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.RotateComponent), global::Buttplug.DeviceMessage.Types.RotateComponent.Parser, new[]{ "Index", "Speed", "Clockwise" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.RotateCmd), global::Buttplug.DeviceMessage.Types.RotateCmd.Parser, new[]{ "Rotations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.LinearComponent), global::Buttplug.DeviceMessage.Types.LinearComponent.Parser, new[]{ "Index", "Duration", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.LinearCmd), global::Buttplug.DeviceMessage.Types.LinearCmd.Parser, new[]{ "Movements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.StopDeviceCmd), global::Buttplug.DeviceMessage.Types.StopDeviceCmd.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.RawReadCmd), global::Buttplug.DeviceMessage.Types.RawReadCmd.Parser, new[]{ "Endpoint", "Data", "ExpectedLength", "Timeout" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.RawWriteCmd), global::Buttplug.DeviceMessage.Types.RawWriteCmd.Parser, new[]{ "Endpoint", "Data", "WriteWithResponse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.RawSubscribeCmd), global::Buttplug.DeviceMessage.Types.RawSubscribeCmd.Parser, new[]{ "Endpoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.RawUnsubscribeCmd), global::Buttplug.DeviceMessage.Types.RawUnsubscribeCmd.Parser, new[]{ "Endpoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.BatteryLevelCmd), global::Buttplug.DeviceMessage.Types.BatteryLevelCmd.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.RSSILevelCmd), global::Buttplug.DeviceMessage.Types.RSSILevelCmd.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceMessage.Types.FFIMessage), global::Buttplug.DeviceMessage.Types.FFIMessage.Parser, new[]{ "VibrateCmd", "RotateCmd", "LinearCmd", "StopDeviceCmd", "RawReadCmd", "RawWriteCmd", "RawSubscribeCmd", "RawUnsubscribeCmd", "BatteryLevelCmd", "RssiLevelCmd" }, new[]{ "Msg" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ServerMessage), global::Buttplug.ServerMessage.Parser, new[]{ "Ok", "Error", "ScanningFinished", "DeviceAdded", "DeviceRemoved", "Disconnect" }, new[]{ "Msg" }, new[]{ typeof(global::Buttplug.ServerMessage.Types.ButtplugErrorType), typeof(global::Buttplug.ServerMessage.Types.MessageAttributeType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ServerMessage.Types.MessageAttributes), global::Buttplug.ServerMessage.Types.MessageAttributes.Parser, new[]{ "MessageType", "FeatureCount", "StepCount", "Endpoints", "MaxDuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ServerMessage.Types.Ok), global::Buttplug.ServerMessage.Types.Ok.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ServerMessage.Types.Error), global::Buttplug.ServerMessage.Types.Error.Parser, new[]{ "ErrorType", "Message", "Backtrace" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ServerMessage.Types.ScanningFinished), global::Buttplug.ServerMessage.Types.ScanningFinished.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ServerMessage.Types.DeviceAdded), global::Buttplug.ServerMessage.Types.DeviceAdded.Parser, new[]{ "Name", "Index", "MessageAttributes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ServerMessage.Types.DeviceRemoved), global::Buttplug.ServerMessage.Types.DeviceRemoved.Parser, new[]{ "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ServerMessage.Types.Disconnect), global::Buttplug.ServerMessage.Types.Disconnect.Parser, null, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceEvent), global::Buttplug.DeviceEvent.Parser, new[]{ "Disconnect", "BatteryLevelReading", "RssiLevelReading", "RawReading" }, new[]{ "Msg" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceEvent.Types.Disconnect), global::Buttplug.DeviceEvent.Types.Disconnect.Parser, new[]{ "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceEvent.Types.RawReading), global::Buttplug.DeviceEvent.Types.RawReading.Parser, new[]{ "Index", "Endpoint", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceEvent.Types.BatteryLevelReading), global::Buttplug.DeviceEvent.Types.BatteryLevelReading.Parser, new[]{ "Index", "Reading" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.DeviceEvent.Types.RSSILevelReading), global::Buttplug.DeviceEvent.Types.RSSILevelReading.Parser, new[]{ "Index", "Reading" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ButtplugFFIServerMessage), global::Buttplug.ButtplugFFIServerMessage.Parser, new[]{ "Id", "Message" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Buttplug.ButtplugFFIServerMessage.Types.FFIMessage), global::Buttplug.ButtplugFFIServerMessage.Types.FFIMessage.Parser, new[]{ "ServerMessage", "DeviceEvent" }, new[]{ "Msg" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum Endpoint {
    [pbr::OriginalName("Command")] Command = 0,
    [pbr::OriginalName("Firmware")] Firmware = 1,
    [pbr::OriginalName("Rx")] Rx = 2,
    [pbr::OriginalName("RxAccel")] RxAccel = 3,
    [pbr::OriginalName("RxBLEBattery")] RxBlebattery = 4,
    [pbr::OriginalName("RxPressure")] RxPressure = 5,
    [pbr::OriginalName("RxTouch")] RxTouch = 6,
    [pbr::OriginalName("Tx")] Tx = 7,
    [pbr::OriginalName("TxMode")] TxMode = 8,
    [pbr::OriginalName("TxShock")] TxShock = 9,
    [pbr::OriginalName("TxVibrate")] TxVibrate = 10,
    [pbr::OriginalName("TxVendorControl")] TxVendorControl = 11,
    [pbr::OriginalName("Whitelist")] Whitelist = 12,
    [pbr::OriginalName("Generic0")] Generic0 = 13,
    [pbr::OriginalName("Generic1")] Generic1 = 14,
    [pbr::OriginalName("Generic2")] Generic2 = 15,
    [pbr::OriginalName("Generic3")] Generic3 = 16,
    [pbr::OriginalName("Generic4")] Generic4 = 17,
    [pbr::OriginalName("Generic5")] Generic5 = 18,
    [pbr::OriginalName("Generic6")] Generic6 = 19,
    [pbr::OriginalName("Generic7")] Generic7 = 20,
    [pbr::OriginalName("Generic8")] Generic8 = 21,
    [pbr::OriginalName("Generic9")] Generic9 = 22,
    [pbr::OriginalName("Generic10")] Generic10 = 23,
    [pbr::OriginalName("Generic11")] Generic11 = 24,
    [pbr::OriginalName("Generic12")] Generic12 = 25,
    [pbr::OriginalName("Generic13")] Generic13 = 26,
    [pbr::OriginalName("Generic14")] Generic14 = 27,
    [pbr::OriginalName("Generic15")] Generic15 = 28,
    [pbr::OriginalName("Generic16")] Generic16 = 29,
    [pbr::OriginalName("Generic17")] Generic17 = 30,
    [pbr::OriginalName("Generic18")] Generic18 = 31,
    [pbr::OriginalName("Generic19")] Generic19 = 32,
    [pbr::OriginalName("Generic20")] Generic20 = 33,
    [pbr::OriginalName("Generic21")] Generic21 = 34,
    [pbr::OriginalName("Generic22")] Generic22 = 35,
    [pbr::OriginalName("Generic23")] Generic23 = 36,
    [pbr::OriginalName("Generic24")] Generic24 = 37,
    [pbr::OriginalName("Generic25")] Generic25 = 38,
    [pbr::OriginalName("Generic26")] Generic26 = 39,
    [pbr::OriginalName("Generic27")] Generic27 = 40,
    [pbr::OriginalName("Generic28")] Generic28 = 41,
    [pbr::OriginalName("Generic29")] Generic29 = 42,
    [pbr::OriginalName("Generic30")] Generic30 = 43,
    [pbr::OriginalName("Generic31")] Generic31 = 44,
  }

  #endregion

  #region Messages
  public sealed partial class ClientMessage : pb::IMessage<ClientMessage> {
    private static readonly pb::MessageParser<ClientMessage> _parser = new pb::MessageParser<ClientMessage>(() => new ClientMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buttplug.ButtplugRsFfiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage(ClientMessage other) : this() {
      id_ = other.id_;
      message_ = other.message_ != null ? other.message_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage Clone() {
      return new ClientMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private global::Buttplug.ClientMessage.Types.FFIMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.ClientMessage.Types.FFIMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Message, other.Message)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (message_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          Message = new global::Buttplug.ClientMessage.Types.FFIMessage();
        }
        Message.MergeFrom(other.Message);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (message_ == null) {
              Message = new global::Buttplug.ClientMessage.Types.FFIMessage();
            }
            input.ReadMessage(Message);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClientMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// This is a bitfield, not a normal enum
      /// </summary>
      public enum DeviceCommunicationManagerTypes {
        [pbr::OriginalName("All")] All = 0,
        [pbr::OriginalName("Btleplug")] Btleplug = 1,
        [pbr::OriginalName("XInput")] Xinput = 2,
        [pbr::OriginalName("SerialPort")] SerialPort = 4,
        [pbr::OriginalName("LovenseHIDDongle")] LovenseHiddongle = 8,
        [pbr::OriginalName("LovenseSerialDongle")] LovenseSerialDongle = 16,
      }

      public sealed partial class ConnectLocal : pb::IMessage<ConnectLocal> {
        private static readonly pb::MessageParser<ConnectLocal> _parser = new pb::MessageParser<ConnectLocal>(() => new ConnectLocal());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConnectLocal> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ClientMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectLocal() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectLocal(ConnectLocal other) : this() {
          serverName_ = other.serverName_;
          maxPingTime_ = other.maxPingTime_;
          allowRawMessages_ = other.allowRawMessages_;
          deviceConfigurationJson_ = other.deviceConfigurationJson_;
          userDeviceConfigurationJson_ = other.userDeviceConfigurationJson_;
          commManagerTypes_ = other.commManagerTypes_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectLocal Clone() {
          return new ConnectLocal(this);
        }

        /// <summary>Field number for the "server_name" field.</summary>
        public const int ServerNameFieldNumber = 1;
        private string serverName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServerName {
          get { return serverName_; }
          set {
            serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "max_ping_time" field.</summary>
        public const int MaxPingTimeFieldNumber = 2;
        private uint maxPingTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxPingTime {
          get { return maxPingTime_; }
          set {
            maxPingTime_ = value;
          }
        }

        /// <summary>Field number for the "allow_raw_messages" field.</summary>
        public const int AllowRawMessagesFieldNumber = 3;
        private bool allowRawMessages_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowRawMessages {
          get { return allowRawMessages_; }
          set {
            allowRawMessages_ = value;
          }
        }

        /// <summary>Field number for the "device_configuration_json" field.</summary>
        public const int DeviceConfigurationJsonFieldNumber = 4;
        private string deviceConfigurationJson_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceConfigurationJson {
          get { return deviceConfigurationJson_; }
          set {
            deviceConfigurationJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_device_configuration_json" field.</summary>
        public const int UserDeviceConfigurationJsonFieldNumber = 5;
        private string userDeviceConfigurationJson_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserDeviceConfigurationJson {
          get { return userDeviceConfigurationJson_; }
          set {
            userDeviceConfigurationJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "comm_manager_types" field.</summary>
        public const int CommManagerTypesFieldNumber = 6;
        private uint commManagerTypes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CommManagerTypes {
          get { return commManagerTypes_; }
          set {
            commManagerTypes_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConnectLocal);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConnectLocal other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ServerName != other.ServerName) return false;
          if (MaxPingTime != other.MaxPingTime) return false;
          if (AllowRawMessages != other.AllowRawMessages) return false;
          if (DeviceConfigurationJson != other.DeviceConfigurationJson) return false;
          if (UserDeviceConfigurationJson != other.UserDeviceConfigurationJson) return false;
          if (CommManagerTypes != other.CommManagerTypes) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
          if (MaxPingTime != 0) hash ^= MaxPingTime.GetHashCode();
          if (AllowRawMessages != false) hash ^= AllowRawMessages.GetHashCode();
          if (DeviceConfigurationJson.Length != 0) hash ^= DeviceConfigurationJson.GetHashCode();
          if (UserDeviceConfigurationJson.Length != 0) hash ^= UserDeviceConfigurationJson.GetHashCode();
          if (CommManagerTypes != 0) hash ^= CommManagerTypes.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ServerName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ServerName);
          }
          if (MaxPingTime != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(MaxPingTime);
          }
          if (AllowRawMessages != false) {
            output.WriteRawTag(24);
            output.WriteBool(AllowRawMessages);
          }
          if (DeviceConfigurationJson.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(DeviceConfigurationJson);
          }
          if (UserDeviceConfigurationJson.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(UserDeviceConfigurationJson);
          }
          if (CommManagerTypes != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(CommManagerTypes);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ServerName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
          }
          if (MaxPingTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPingTime);
          }
          if (AllowRawMessages != false) {
            size += 1 + 1;
          }
          if (DeviceConfigurationJson.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceConfigurationJson);
          }
          if (UserDeviceConfigurationJson.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserDeviceConfigurationJson);
          }
          if (CommManagerTypes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CommManagerTypes);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConnectLocal other) {
          if (other == null) {
            return;
          }
          if (other.ServerName.Length != 0) {
            ServerName = other.ServerName;
          }
          if (other.MaxPingTime != 0) {
            MaxPingTime = other.MaxPingTime;
          }
          if (other.AllowRawMessages != false) {
            AllowRawMessages = other.AllowRawMessages;
          }
          if (other.DeviceConfigurationJson.Length != 0) {
            DeviceConfigurationJson = other.DeviceConfigurationJson;
          }
          if (other.UserDeviceConfigurationJson.Length != 0) {
            UserDeviceConfigurationJson = other.UserDeviceConfigurationJson;
          }
          if (other.CommManagerTypes != 0) {
            CommManagerTypes = other.CommManagerTypes;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ServerName = input.ReadString();
                break;
              }
              case 16: {
                MaxPingTime = input.ReadUInt32();
                break;
              }
              case 24: {
                AllowRawMessages = input.ReadBool();
                break;
              }
              case 34: {
                DeviceConfigurationJson = input.ReadString();
                break;
              }
              case 42: {
                UserDeviceConfigurationJson = input.ReadString();
                break;
              }
              case 48: {
                CommManagerTypes = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ConnectWebsocket : pb::IMessage<ConnectWebsocket> {
        private static readonly pb::MessageParser<ConnectWebsocket> _parser = new pb::MessageParser<ConnectWebsocket>(() => new ConnectWebsocket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConnectWebsocket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ClientMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectWebsocket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectWebsocket(ConnectWebsocket other) : this() {
          address_ = other.address_;
          bypassCertVerification_ = other.bypassCertVerification_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnectWebsocket Clone() {
          return new ConnectWebsocket(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private string address_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bypass_cert_verification" field.</summary>
        public const int BypassCertVerificationFieldNumber = 2;
        private bool bypassCertVerification_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BypassCertVerification {
          get { return bypassCertVerification_; }
          set {
            bypassCertVerification_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConnectWebsocket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConnectWebsocket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (BypassCertVerification != other.BypassCertVerification) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (BypassCertVerification != false) hash ^= BypassCertVerification.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Address);
          }
          if (BypassCertVerification != false) {
            output.WriteRawTag(16);
            output.WriteBool(BypassCertVerification);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
          }
          if (BypassCertVerification != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConnectWebsocket other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.BypassCertVerification != false) {
            BypassCertVerification = other.BypassCertVerification;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Address = input.ReadString();
                break;
              }
              case 16: {
                BypassCertVerification = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class StartScanning : pb::IMessage<StartScanning> {
        private static readonly pb::MessageParser<StartScanning> _parser = new pb::MessageParser<StartScanning>(() => new StartScanning());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StartScanning> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ClientMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartScanning() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartScanning(StartScanning other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartScanning Clone() {
          return new StartScanning(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StartScanning);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StartScanning other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StartScanning other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class StopScanning : pb::IMessage<StopScanning> {
        private static readonly pb::MessageParser<StopScanning> _parser = new pb::MessageParser<StopScanning>(() => new StopScanning());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StopScanning> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ClientMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopScanning() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopScanning(StopScanning other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopScanning Clone() {
          return new StopScanning(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StopScanning);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StopScanning other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StopScanning other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class StopAllDevices : pb::IMessage<StopAllDevices> {
        private static readonly pb::MessageParser<StopAllDevices> _parser = new pb::MessageParser<StopAllDevices>(() => new StopAllDevices());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StopAllDevices> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ClientMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopAllDevices() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopAllDevices(StopAllDevices other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopAllDevices Clone() {
          return new StopAllDevices(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StopAllDevices);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StopAllDevices other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StopAllDevices other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class Disconnect : pb::IMessage<Disconnect> {
        private static readonly pb::MessageParser<Disconnect> _parser = new pb::MessageParser<Disconnect>(() => new Disconnect());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Disconnect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ClientMessage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect(Disconnect other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect Clone() {
          return new Disconnect(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Disconnect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Disconnect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Disconnect other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class Ping : pb::IMessage<Ping> {
        private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Ping> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ClientMessage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ping() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ping(Ping other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ping Clone() {
          return new Ping(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Ping);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Ping other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Ping other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class FFIMessage : pb::IMessage<FFIMessage> {
        private static readonly pb::MessageParser<FFIMessage> _parser = new pb::MessageParser<FFIMessage>(() => new FFIMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FFIMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ClientMessage.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage(FFIMessage other) : this() {
          switch (other.MsgCase) {
            case MsgOneofCase.ConnectLocal:
              ConnectLocal = other.ConnectLocal.Clone();
              break;
            case MsgOneofCase.ConnectWebsocket:
              ConnectWebsocket = other.ConnectWebsocket.Clone();
              break;
            case MsgOneofCase.StartScanning:
              StartScanning = other.StartScanning.Clone();
              break;
            case MsgOneofCase.StopScanning:
              StopScanning = other.StopScanning.Clone();
              break;
            case MsgOneofCase.StopAllDevices:
              StopAllDevices = other.StopAllDevices.Clone();
              break;
            case MsgOneofCase.Disconnect:
              Disconnect = other.Disconnect.Clone();
              break;
            case MsgOneofCase.Ping:
              Ping = other.Ping.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage Clone() {
          return new FFIMessage(this);
        }

        /// <summary>Field number for the "connect_local" field.</summary>
        public const int ConnectLocalFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ClientMessage.Types.ConnectLocal ConnectLocal {
          get { return msgCase_ == MsgOneofCase.ConnectLocal ? (global::Buttplug.ClientMessage.Types.ConnectLocal) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ConnectLocal;
          }
        }

        /// <summary>Field number for the "connect_websocket" field.</summary>
        public const int ConnectWebsocketFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ClientMessage.Types.ConnectWebsocket ConnectWebsocket {
          get { return msgCase_ == MsgOneofCase.ConnectWebsocket ? (global::Buttplug.ClientMessage.Types.ConnectWebsocket) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ConnectWebsocket;
          }
        }

        /// <summary>Field number for the "start_scanning" field.</summary>
        public const int StartScanningFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ClientMessage.Types.StartScanning StartScanning {
          get { return msgCase_ == MsgOneofCase.StartScanning ? (global::Buttplug.ClientMessage.Types.StartScanning) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StartScanning;
          }
        }

        /// <summary>Field number for the "stop_scanning" field.</summary>
        public const int StopScanningFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ClientMessage.Types.StopScanning StopScanning {
          get { return msgCase_ == MsgOneofCase.StopScanning ? (global::Buttplug.ClientMessage.Types.StopScanning) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StopScanning;
          }
        }

        /// <summary>Field number for the "stop_all_devices" field.</summary>
        public const int StopAllDevicesFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ClientMessage.Types.StopAllDevices StopAllDevices {
          get { return msgCase_ == MsgOneofCase.StopAllDevices ? (global::Buttplug.ClientMessage.Types.StopAllDevices) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StopAllDevices;
          }
        }

        /// <summary>Field number for the "disconnect" field.</summary>
        public const int DisconnectFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ClientMessage.Types.Disconnect Disconnect {
          get { return msgCase_ == MsgOneofCase.Disconnect ? (global::Buttplug.ClientMessage.Types.Disconnect) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Disconnect;
          }
        }

        /// <summary>Field number for the "ping" field.</summary>
        public const int PingFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ClientMessage.Types.Ping Ping {
          get { return msgCase_ == MsgOneofCase.Ping ? (global::Buttplug.ClientMessage.Types.Ping) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Ping;
          }
        }

        private object msg_;
        /// <summary>Enum of possible cases for the "msg" oneof.</summary>
        public enum MsgOneofCase {
          None = 0,
          ConnectLocal = 1,
          ConnectWebsocket = 2,
          StartScanning = 3,
          StopScanning = 4,
          StopAllDevices = 5,
          Disconnect = 6,
          Ping = 7,
        }
        private MsgOneofCase msgCase_ = MsgOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MsgOneofCase MsgCase {
          get { return msgCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMsg() {
          msgCase_ = MsgOneofCase.None;
          msg_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FFIMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FFIMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ConnectLocal, other.ConnectLocal)) return false;
          if (!object.Equals(ConnectWebsocket, other.ConnectWebsocket)) return false;
          if (!object.Equals(StartScanning, other.StartScanning)) return false;
          if (!object.Equals(StopScanning, other.StopScanning)) return false;
          if (!object.Equals(StopAllDevices, other.StopAllDevices)) return false;
          if (!object.Equals(Disconnect, other.Disconnect)) return false;
          if (!object.Equals(Ping, other.Ping)) return false;
          if (MsgCase != other.MsgCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (msgCase_ == MsgOneofCase.ConnectLocal) hash ^= ConnectLocal.GetHashCode();
          if (msgCase_ == MsgOneofCase.ConnectWebsocket) hash ^= ConnectWebsocket.GetHashCode();
          if (msgCase_ == MsgOneofCase.StartScanning) hash ^= StartScanning.GetHashCode();
          if (msgCase_ == MsgOneofCase.StopScanning) hash ^= StopScanning.GetHashCode();
          if (msgCase_ == MsgOneofCase.StopAllDevices) hash ^= StopAllDevices.GetHashCode();
          if (msgCase_ == MsgOneofCase.Disconnect) hash ^= Disconnect.GetHashCode();
          if (msgCase_ == MsgOneofCase.Ping) hash ^= Ping.GetHashCode();
          hash ^= (int) msgCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (msgCase_ == MsgOneofCase.ConnectLocal) {
            output.WriteRawTag(10);
            output.WriteMessage(ConnectLocal);
          }
          if (msgCase_ == MsgOneofCase.ConnectWebsocket) {
            output.WriteRawTag(18);
            output.WriteMessage(ConnectWebsocket);
          }
          if (msgCase_ == MsgOneofCase.StartScanning) {
            output.WriteRawTag(26);
            output.WriteMessage(StartScanning);
          }
          if (msgCase_ == MsgOneofCase.StopScanning) {
            output.WriteRawTag(34);
            output.WriteMessage(StopScanning);
          }
          if (msgCase_ == MsgOneofCase.StopAllDevices) {
            output.WriteRawTag(42);
            output.WriteMessage(StopAllDevices);
          }
          if (msgCase_ == MsgOneofCase.Disconnect) {
            output.WriteRawTag(50);
            output.WriteMessage(Disconnect);
          }
          if (msgCase_ == MsgOneofCase.Ping) {
            output.WriteRawTag(58);
            output.WriteMessage(Ping);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (msgCase_ == MsgOneofCase.ConnectLocal) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectLocal);
          }
          if (msgCase_ == MsgOneofCase.ConnectWebsocket) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectWebsocket);
          }
          if (msgCase_ == MsgOneofCase.StartScanning) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartScanning);
          }
          if (msgCase_ == MsgOneofCase.StopScanning) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopScanning);
          }
          if (msgCase_ == MsgOneofCase.StopAllDevices) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopAllDevices);
          }
          if (msgCase_ == MsgOneofCase.Disconnect) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disconnect);
          }
          if (msgCase_ == MsgOneofCase.Ping) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FFIMessage other) {
          if (other == null) {
            return;
          }
          switch (other.MsgCase) {
            case MsgOneofCase.ConnectLocal:
              if (ConnectLocal == null) {
                ConnectLocal = new global::Buttplug.ClientMessage.Types.ConnectLocal();
              }
              ConnectLocal.MergeFrom(other.ConnectLocal);
              break;
            case MsgOneofCase.ConnectWebsocket:
              if (ConnectWebsocket == null) {
                ConnectWebsocket = new global::Buttplug.ClientMessage.Types.ConnectWebsocket();
              }
              ConnectWebsocket.MergeFrom(other.ConnectWebsocket);
              break;
            case MsgOneofCase.StartScanning:
              if (StartScanning == null) {
                StartScanning = new global::Buttplug.ClientMessage.Types.StartScanning();
              }
              StartScanning.MergeFrom(other.StartScanning);
              break;
            case MsgOneofCase.StopScanning:
              if (StopScanning == null) {
                StopScanning = new global::Buttplug.ClientMessage.Types.StopScanning();
              }
              StopScanning.MergeFrom(other.StopScanning);
              break;
            case MsgOneofCase.StopAllDevices:
              if (StopAllDevices == null) {
                StopAllDevices = new global::Buttplug.ClientMessage.Types.StopAllDevices();
              }
              StopAllDevices.MergeFrom(other.StopAllDevices);
              break;
            case MsgOneofCase.Disconnect:
              if (Disconnect == null) {
                Disconnect = new global::Buttplug.ClientMessage.Types.Disconnect();
              }
              Disconnect.MergeFrom(other.Disconnect);
              break;
            case MsgOneofCase.Ping:
              if (Ping == null) {
                Ping = new global::Buttplug.ClientMessage.Types.Ping();
              }
              Ping.MergeFrom(other.Ping);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Buttplug.ClientMessage.Types.ConnectLocal subBuilder = new global::Buttplug.ClientMessage.Types.ConnectLocal();
                if (msgCase_ == MsgOneofCase.ConnectLocal) {
                  subBuilder.MergeFrom(ConnectLocal);
                }
                input.ReadMessage(subBuilder);
                ConnectLocal = subBuilder;
                break;
              }
              case 18: {
                global::Buttplug.ClientMessage.Types.ConnectWebsocket subBuilder = new global::Buttplug.ClientMessage.Types.ConnectWebsocket();
                if (msgCase_ == MsgOneofCase.ConnectWebsocket) {
                  subBuilder.MergeFrom(ConnectWebsocket);
                }
                input.ReadMessage(subBuilder);
                ConnectWebsocket = subBuilder;
                break;
              }
              case 26: {
                global::Buttplug.ClientMessage.Types.StartScanning subBuilder = new global::Buttplug.ClientMessage.Types.StartScanning();
                if (msgCase_ == MsgOneofCase.StartScanning) {
                  subBuilder.MergeFrom(StartScanning);
                }
                input.ReadMessage(subBuilder);
                StartScanning = subBuilder;
                break;
              }
              case 34: {
                global::Buttplug.ClientMessage.Types.StopScanning subBuilder = new global::Buttplug.ClientMessage.Types.StopScanning();
                if (msgCase_ == MsgOneofCase.StopScanning) {
                  subBuilder.MergeFrom(StopScanning);
                }
                input.ReadMessage(subBuilder);
                StopScanning = subBuilder;
                break;
              }
              case 42: {
                global::Buttplug.ClientMessage.Types.StopAllDevices subBuilder = new global::Buttplug.ClientMessage.Types.StopAllDevices();
                if (msgCase_ == MsgOneofCase.StopAllDevices) {
                  subBuilder.MergeFrom(StopAllDevices);
                }
                input.ReadMessage(subBuilder);
                StopAllDevices = subBuilder;
                break;
              }
              case 50: {
                global::Buttplug.ClientMessage.Types.Disconnect subBuilder = new global::Buttplug.ClientMessage.Types.Disconnect();
                if (msgCase_ == MsgOneofCase.Disconnect) {
                  subBuilder.MergeFrom(Disconnect);
                }
                input.ReadMessage(subBuilder);
                Disconnect = subBuilder;
                break;
              }
              case 58: {
                global::Buttplug.ClientMessage.Types.Ping subBuilder = new global::Buttplug.ClientMessage.Types.Ping();
                if (msgCase_ == MsgOneofCase.Ping) {
                  subBuilder.MergeFrom(Ping);
                }
                input.ReadMessage(subBuilder);
                Ping = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DeviceMessage : pb::IMessage<DeviceMessage> {
    private static readonly pb::MessageParser<DeviceMessage> _parser = new pb::MessageParser<DeviceMessage>(() => new DeviceMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buttplug.ButtplugRsFfiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceMessage(DeviceMessage other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      message_ = other.message_ != null ? other.message_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceMessage Clone() {
      return new DeviceMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private global::Buttplug.DeviceMessage.Types.FFIMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.DeviceMessage.Types.FFIMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (!object.Equals(Message, other.Message)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (message_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          Message = new global::Buttplug.DeviceMessage.Types.FFIMessage();
        }
        Message.MergeFrom(other.Message);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 26: {
            if (message_ == null) {
              Message = new global::Buttplug.DeviceMessage.Types.FFIMessage();
            }
            input.ReadMessage(Message);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeviceMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class VibrateComponent : pb::IMessage<VibrateComponent> {
        private static readonly pb::MessageParser<VibrateComponent> _parser = new pb::MessageParser<VibrateComponent>(() => new VibrateComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VibrateComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VibrateComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VibrateComponent(VibrateComponent other) : this() {
          index_ = other.index_;
          speed_ = other.speed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VibrateComponent Clone() {
          return new VibrateComponent(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 2;
        private double speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VibrateComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VibrateComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Speed, other.Speed)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Speed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Speed);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Speed != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Speed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Speed != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VibrateComponent other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Speed != 0D) {
            Speed = other.Speed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 17: {
                Speed = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class VibrateCmd : pb::IMessage<VibrateCmd> {
        private static readonly pb::MessageParser<VibrateCmd> _parser = new pb::MessageParser<VibrateCmd>(() => new VibrateCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VibrateCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VibrateCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VibrateCmd(VibrateCmd other) : this() {
          speeds_ = other.speeds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VibrateCmd Clone() {
          return new VibrateCmd(this);
        }

        /// <summary>Field number for the "speeds" field.</summary>
        public const int SpeedsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Buttplug.DeviceMessage.Types.VibrateComponent> _repeated_speeds_codec
            = pb::FieldCodec.ForMessage(10, global::Buttplug.DeviceMessage.Types.VibrateComponent.Parser);
        private readonly pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.VibrateComponent> speeds_ = new pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.VibrateComponent>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.VibrateComponent> Speeds {
          get { return speeds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VibrateCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VibrateCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!speeds_.Equals(other.speeds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= speeds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          speeds_.WriteTo(output, _repeated_speeds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += speeds_.CalculateSize(_repeated_speeds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VibrateCmd other) {
          if (other == null) {
            return;
          }
          speeds_.Add(other.speeds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                speeds_.AddEntriesFrom(input, _repeated_speeds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class RotateComponent : pb::IMessage<RotateComponent> {
        private static readonly pb::MessageParser<RotateComponent> _parser = new pb::MessageParser<RotateComponent>(() => new RotateComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RotateComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RotateComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RotateComponent(RotateComponent other) : this() {
          index_ = other.index_;
          speed_ = other.speed_;
          clockwise_ = other.clockwise_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RotateComponent Clone() {
          return new RotateComponent(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 2;
        private double speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        /// <summary>Field number for the "clockwise" field.</summary>
        public const int ClockwiseFieldNumber = 3;
        private bool clockwise_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Clockwise {
          get { return clockwise_; }
          set {
            clockwise_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RotateComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RotateComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Speed, other.Speed)) return false;
          if (Clockwise != other.Clockwise) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Speed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Speed);
          if (Clockwise != false) hash ^= Clockwise.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Speed != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Speed);
          }
          if (Clockwise != false) {
            output.WriteRawTag(24);
            output.WriteBool(Clockwise);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Speed != 0D) {
            size += 1 + 8;
          }
          if (Clockwise != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RotateComponent other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Speed != 0D) {
            Speed = other.Speed;
          }
          if (other.Clockwise != false) {
            Clockwise = other.Clockwise;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 17: {
                Speed = input.ReadDouble();
                break;
              }
              case 24: {
                Clockwise = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RotateCmd : pb::IMessage<RotateCmd> {
        private static readonly pb::MessageParser<RotateCmd> _parser = new pb::MessageParser<RotateCmd>(() => new RotateCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RotateCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RotateCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RotateCmd(RotateCmd other) : this() {
          rotations_ = other.rotations_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RotateCmd Clone() {
          return new RotateCmd(this);
        }

        /// <summary>Field number for the "rotations" field.</summary>
        public const int RotationsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Buttplug.DeviceMessage.Types.RotateComponent> _repeated_rotations_codec
            = pb::FieldCodec.ForMessage(10, global::Buttplug.DeviceMessage.Types.RotateComponent.Parser);
        private readonly pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.RotateComponent> rotations_ = new pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.RotateComponent>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.RotateComponent> Rotations {
          get { return rotations_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RotateCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RotateCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rotations_.Equals(other.rotations_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rotations_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rotations_.WriteTo(output, _repeated_rotations_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rotations_.CalculateSize(_repeated_rotations_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RotateCmd other) {
          if (other == null) {
            return;
          }
          rotations_.Add(other.rotations_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                rotations_.AddEntriesFrom(input, _repeated_rotations_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class LinearComponent : pb::IMessage<LinearComponent> {
        private static readonly pb::MessageParser<LinearComponent> _parser = new pb::MessageParser<LinearComponent>(() => new LinearComponent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LinearComponent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LinearComponent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LinearComponent(LinearComponent other) : this() {
          index_ = other.index_;
          duration_ = other.duration_;
          position_ = other.position_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LinearComponent Clone() {
          return new LinearComponent(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "duration" field.</summary>
        public const int DurationFieldNumber = 2;
        private uint duration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Duration {
          get { return duration_; }
          set {
            duration_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 3;
        private double position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LinearComponent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LinearComponent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (Duration != other.Duration) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Position, other.Position)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Duration != 0) hash ^= Duration.GetHashCode();
          if (Position != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Position);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Duration != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Duration);
          }
          if (Position != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Position);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Duration != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
          }
          if (Position != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LinearComponent other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Duration != 0) {
            Duration = other.Duration;
          }
          if (other.Position != 0D) {
            Position = other.Position;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Duration = input.ReadUInt32();
                break;
              }
              case 25: {
                Position = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LinearCmd : pb::IMessage<LinearCmd> {
        private static readonly pb::MessageParser<LinearCmd> _parser = new pb::MessageParser<LinearCmd>(() => new LinearCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LinearCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LinearCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LinearCmd(LinearCmd other) : this() {
          movements_ = other.movements_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LinearCmd Clone() {
          return new LinearCmd(this);
        }

        /// <summary>Field number for the "movements" field.</summary>
        public const int MovementsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Buttplug.DeviceMessage.Types.LinearComponent> _repeated_movements_codec
            = pb::FieldCodec.ForMessage(10, global::Buttplug.DeviceMessage.Types.LinearComponent.Parser);
        private readonly pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.LinearComponent> movements_ = new pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.LinearComponent>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Buttplug.DeviceMessage.Types.LinearComponent> Movements {
          get { return movements_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LinearCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LinearCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!movements_.Equals(other.movements_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= movements_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          movements_.WriteTo(output, _repeated_movements_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += movements_.CalculateSize(_repeated_movements_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LinearCmd other) {
          if (other == null) {
            return;
          }
          movements_.Add(other.movements_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                movements_.AddEntriesFrom(input, _repeated_movements_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class StopDeviceCmd : pb::IMessage<StopDeviceCmd> {
        private static readonly pb::MessageParser<StopDeviceCmd> _parser = new pb::MessageParser<StopDeviceCmd>(() => new StopDeviceCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StopDeviceCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopDeviceCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopDeviceCmd(StopDeviceCmd other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopDeviceCmd Clone() {
          return new StopDeviceCmd(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StopDeviceCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StopDeviceCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StopDeviceCmd other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class RawReadCmd : pb::IMessage<RawReadCmd> {
        private static readonly pb::MessageParser<RawReadCmd> _parser = new pb::MessageParser<RawReadCmd>(() => new RawReadCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RawReadCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawReadCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawReadCmd(RawReadCmd other) : this() {
          endpoint_ = other.endpoint_;
          data_ = other.data_;
          expectedLength_ = other.expectedLength_;
          timeout_ = other.timeout_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawReadCmd Clone() {
          return new RawReadCmd(this);
        }

        /// <summary>Field number for the "endpoint" field.</summary>
        public const int EndpointFieldNumber = 1;
        private global::Buttplug.Endpoint endpoint_ = global::Buttplug.Endpoint.Command;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.Endpoint Endpoint {
          get { return endpoint_; }
          set {
            endpoint_ = value;
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expected_length" field.</summary>
        public const int ExpectedLengthFieldNumber = 3;
        private uint expectedLength_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExpectedLength {
          get { return expectedLength_; }
          set {
            expectedLength_ = value;
          }
        }

        /// <summary>Field number for the "timeout" field.</summary>
        public const int TimeoutFieldNumber = 4;
        private uint timeout_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Timeout {
          get { return timeout_; }
          set {
            timeout_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RawReadCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RawReadCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Endpoint != other.Endpoint) return false;
          if (Data != other.Data) return false;
          if (ExpectedLength != other.ExpectedLength) return false;
          if (Timeout != other.Timeout) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Endpoint != global::Buttplug.Endpoint.Command) hash ^= Endpoint.GetHashCode();
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          if (ExpectedLength != 0) hash ^= ExpectedLength.GetHashCode();
          if (Timeout != 0) hash ^= Timeout.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Endpoint);
          }
          if (Data.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Data);
          }
          if (ExpectedLength != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(ExpectedLength);
          }
          if (Timeout != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Timeout);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Endpoint);
          }
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          if (ExpectedLength != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpectedLength);
          }
          if (Timeout != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeout);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RawReadCmd other) {
          if (other == null) {
            return;
          }
          if (other.Endpoint != global::Buttplug.Endpoint.Command) {
            Endpoint = other.Endpoint;
          }
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          if (other.ExpectedLength != 0) {
            ExpectedLength = other.ExpectedLength;
          }
          if (other.Timeout != 0) {
            Timeout = other.Timeout;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Endpoint = (global::Buttplug.Endpoint) input.ReadEnum();
                break;
              }
              case 18: {
                Data = input.ReadBytes();
                break;
              }
              case 24: {
                ExpectedLength = input.ReadUInt32();
                break;
              }
              case 32: {
                Timeout = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RawWriteCmd : pb::IMessage<RawWriteCmd> {
        private static readonly pb::MessageParser<RawWriteCmd> _parser = new pb::MessageParser<RawWriteCmd>(() => new RawWriteCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RawWriteCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawWriteCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawWriteCmd(RawWriteCmd other) : this() {
          endpoint_ = other.endpoint_;
          data_ = other.data_;
          writeWithResponse_ = other.writeWithResponse_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawWriteCmd Clone() {
          return new RawWriteCmd(this);
        }

        /// <summary>Field number for the "endpoint" field.</summary>
        public const int EndpointFieldNumber = 1;
        private global::Buttplug.Endpoint endpoint_ = global::Buttplug.Endpoint.Command;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.Endpoint Endpoint {
          get { return endpoint_; }
          set {
            endpoint_ = value;
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "write_with_response" field.</summary>
        public const int WriteWithResponseFieldNumber = 3;
        private bool writeWithResponse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool WriteWithResponse {
          get { return writeWithResponse_; }
          set {
            writeWithResponse_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RawWriteCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RawWriteCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Endpoint != other.Endpoint) return false;
          if (Data != other.Data) return false;
          if (WriteWithResponse != other.WriteWithResponse) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Endpoint != global::Buttplug.Endpoint.Command) hash ^= Endpoint.GetHashCode();
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          if (WriteWithResponse != false) hash ^= WriteWithResponse.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Endpoint);
          }
          if (Data.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Data);
          }
          if (WriteWithResponse != false) {
            output.WriteRawTag(24);
            output.WriteBool(WriteWithResponse);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Endpoint);
          }
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          if (WriteWithResponse != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RawWriteCmd other) {
          if (other == null) {
            return;
          }
          if (other.Endpoint != global::Buttplug.Endpoint.Command) {
            Endpoint = other.Endpoint;
          }
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          if (other.WriteWithResponse != false) {
            WriteWithResponse = other.WriteWithResponse;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Endpoint = (global::Buttplug.Endpoint) input.ReadEnum();
                break;
              }
              case 18: {
                Data = input.ReadBytes();
                break;
              }
              case 24: {
                WriteWithResponse = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RawSubscribeCmd : pb::IMessage<RawSubscribeCmd> {
        private static readonly pb::MessageParser<RawSubscribeCmd> _parser = new pb::MessageParser<RawSubscribeCmd>(() => new RawSubscribeCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RawSubscribeCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawSubscribeCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawSubscribeCmd(RawSubscribeCmd other) : this() {
          endpoint_ = other.endpoint_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawSubscribeCmd Clone() {
          return new RawSubscribeCmd(this);
        }

        /// <summary>Field number for the "endpoint" field.</summary>
        public const int EndpointFieldNumber = 1;
        private global::Buttplug.Endpoint endpoint_ = global::Buttplug.Endpoint.Command;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.Endpoint Endpoint {
          get { return endpoint_; }
          set {
            endpoint_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RawSubscribeCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RawSubscribeCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Endpoint != other.Endpoint) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Endpoint != global::Buttplug.Endpoint.Command) hash ^= Endpoint.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Endpoint);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Endpoint);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RawSubscribeCmd other) {
          if (other == null) {
            return;
          }
          if (other.Endpoint != global::Buttplug.Endpoint.Command) {
            Endpoint = other.Endpoint;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Endpoint = (global::Buttplug.Endpoint) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RawUnsubscribeCmd : pb::IMessage<RawUnsubscribeCmd> {
        private static readonly pb::MessageParser<RawUnsubscribeCmd> _parser = new pb::MessageParser<RawUnsubscribeCmd>(() => new RawUnsubscribeCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RawUnsubscribeCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawUnsubscribeCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawUnsubscribeCmd(RawUnsubscribeCmd other) : this() {
          endpoint_ = other.endpoint_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawUnsubscribeCmd Clone() {
          return new RawUnsubscribeCmd(this);
        }

        /// <summary>Field number for the "endpoint" field.</summary>
        public const int EndpointFieldNumber = 1;
        private global::Buttplug.Endpoint endpoint_ = global::Buttplug.Endpoint.Command;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.Endpoint Endpoint {
          get { return endpoint_; }
          set {
            endpoint_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RawUnsubscribeCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RawUnsubscribeCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Endpoint != other.Endpoint) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Endpoint != global::Buttplug.Endpoint.Command) hash ^= Endpoint.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Endpoint);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Endpoint);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RawUnsubscribeCmd other) {
          if (other == null) {
            return;
          }
          if (other.Endpoint != global::Buttplug.Endpoint.Command) {
            Endpoint = other.Endpoint;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Endpoint = (global::Buttplug.Endpoint) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BatteryLevelCmd : pb::IMessage<BatteryLevelCmd> {
        private static readonly pb::MessageParser<BatteryLevelCmd> _parser = new pb::MessageParser<BatteryLevelCmd>(() => new BatteryLevelCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BatteryLevelCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatteryLevelCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatteryLevelCmd(BatteryLevelCmd other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatteryLevelCmd Clone() {
          return new BatteryLevelCmd(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BatteryLevelCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BatteryLevelCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BatteryLevelCmd other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class RSSILevelCmd : pb::IMessage<RSSILevelCmd> {
        private static readonly pb::MessageParser<RSSILevelCmd> _parser = new pb::MessageParser<RSSILevelCmd>(() => new RSSILevelCmd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RSSILevelCmd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RSSILevelCmd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RSSILevelCmd(RSSILevelCmd other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RSSILevelCmd Clone() {
          return new RSSILevelCmd(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RSSILevelCmd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RSSILevelCmd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RSSILevelCmd other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class FFIMessage : pb::IMessage<FFIMessage> {
        private static readonly pb::MessageParser<FFIMessage> _parser = new pb::MessageParser<FFIMessage>(() => new FFIMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FFIMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceMessage.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage(FFIMessage other) : this() {
          switch (other.MsgCase) {
            case MsgOneofCase.VibrateCmd:
              VibrateCmd = other.VibrateCmd.Clone();
              break;
            case MsgOneofCase.RotateCmd:
              RotateCmd = other.RotateCmd.Clone();
              break;
            case MsgOneofCase.LinearCmd:
              LinearCmd = other.LinearCmd.Clone();
              break;
            case MsgOneofCase.StopDeviceCmd:
              StopDeviceCmd = other.StopDeviceCmd.Clone();
              break;
            case MsgOneofCase.RawReadCmd:
              RawReadCmd = other.RawReadCmd.Clone();
              break;
            case MsgOneofCase.RawWriteCmd:
              RawWriteCmd = other.RawWriteCmd.Clone();
              break;
            case MsgOneofCase.RawSubscribeCmd:
              RawSubscribeCmd = other.RawSubscribeCmd.Clone();
              break;
            case MsgOneofCase.RawUnsubscribeCmd:
              RawUnsubscribeCmd = other.RawUnsubscribeCmd.Clone();
              break;
            case MsgOneofCase.BatteryLevelCmd:
              BatteryLevelCmd = other.BatteryLevelCmd.Clone();
              break;
            case MsgOneofCase.RssiLevelCmd:
              RssiLevelCmd = other.RssiLevelCmd.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage Clone() {
          return new FFIMessage(this);
        }

        /// <summary>Field number for the "vibrate_cmd" field.</summary>
        public const int VibrateCmdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.VibrateCmd VibrateCmd {
          get { return msgCase_ == MsgOneofCase.VibrateCmd ? (global::Buttplug.DeviceMessage.Types.VibrateCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.VibrateCmd;
          }
        }

        /// <summary>Field number for the "rotate_cmd" field.</summary>
        public const int RotateCmdFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.RotateCmd RotateCmd {
          get { return msgCase_ == MsgOneofCase.RotateCmd ? (global::Buttplug.DeviceMessage.Types.RotateCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RotateCmd;
          }
        }

        /// <summary>Field number for the "linear_cmd" field.</summary>
        public const int LinearCmdFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.LinearCmd LinearCmd {
          get { return msgCase_ == MsgOneofCase.LinearCmd ? (global::Buttplug.DeviceMessage.Types.LinearCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.LinearCmd;
          }
        }

        /// <summary>Field number for the "stop_device_cmd" field.</summary>
        public const int StopDeviceCmdFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.StopDeviceCmd StopDeviceCmd {
          get { return msgCase_ == MsgOneofCase.StopDeviceCmd ? (global::Buttplug.DeviceMessage.Types.StopDeviceCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StopDeviceCmd;
          }
        }

        /// <summary>Field number for the "raw_read_cmd" field.</summary>
        public const int RawReadCmdFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.RawReadCmd RawReadCmd {
          get { return msgCase_ == MsgOneofCase.RawReadCmd ? (global::Buttplug.DeviceMessage.Types.RawReadCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RawReadCmd;
          }
        }

        /// <summary>Field number for the "raw_write_cmd" field.</summary>
        public const int RawWriteCmdFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.RawWriteCmd RawWriteCmd {
          get { return msgCase_ == MsgOneofCase.RawWriteCmd ? (global::Buttplug.DeviceMessage.Types.RawWriteCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RawWriteCmd;
          }
        }

        /// <summary>Field number for the "raw_subscribe_cmd" field.</summary>
        public const int RawSubscribeCmdFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.RawSubscribeCmd RawSubscribeCmd {
          get { return msgCase_ == MsgOneofCase.RawSubscribeCmd ? (global::Buttplug.DeviceMessage.Types.RawSubscribeCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RawSubscribeCmd;
          }
        }

        /// <summary>Field number for the "raw_unsubscribe_cmd" field.</summary>
        public const int RawUnsubscribeCmdFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.RawUnsubscribeCmd RawUnsubscribeCmd {
          get { return msgCase_ == MsgOneofCase.RawUnsubscribeCmd ? (global::Buttplug.DeviceMessage.Types.RawUnsubscribeCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RawUnsubscribeCmd;
          }
        }

        /// <summary>Field number for the "battery_level_cmd" field.</summary>
        public const int BatteryLevelCmdFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.BatteryLevelCmd BatteryLevelCmd {
          get { return msgCase_ == MsgOneofCase.BatteryLevelCmd ? (global::Buttplug.DeviceMessage.Types.BatteryLevelCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BatteryLevelCmd;
          }
        }

        /// <summary>Field number for the "rssi_level_cmd" field.</summary>
        public const int RssiLevelCmdFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceMessage.Types.RSSILevelCmd RssiLevelCmd {
          get { return msgCase_ == MsgOneofCase.RssiLevelCmd ? (global::Buttplug.DeviceMessage.Types.RSSILevelCmd) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RssiLevelCmd;
          }
        }

        private object msg_;
        /// <summary>Enum of possible cases for the "msg" oneof.</summary>
        public enum MsgOneofCase {
          None = 0,
          VibrateCmd = 1,
          RotateCmd = 2,
          LinearCmd = 3,
          StopDeviceCmd = 4,
          RawReadCmd = 5,
          RawWriteCmd = 6,
          RawSubscribeCmd = 7,
          RawUnsubscribeCmd = 8,
          BatteryLevelCmd = 9,
          RssiLevelCmd = 10,
        }
        private MsgOneofCase msgCase_ = MsgOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MsgOneofCase MsgCase {
          get { return msgCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMsg() {
          msgCase_ = MsgOneofCase.None;
          msg_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FFIMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FFIMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(VibrateCmd, other.VibrateCmd)) return false;
          if (!object.Equals(RotateCmd, other.RotateCmd)) return false;
          if (!object.Equals(LinearCmd, other.LinearCmd)) return false;
          if (!object.Equals(StopDeviceCmd, other.StopDeviceCmd)) return false;
          if (!object.Equals(RawReadCmd, other.RawReadCmd)) return false;
          if (!object.Equals(RawWriteCmd, other.RawWriteCmd)) return false;
          if (!object.Equals(RawSubscribeCmd, other.RawSubscribeCmd)) return false;
          if (!object.Equals(RawUnsubscribeCmd, other.RawUnsubscribeCmd)) return false;
          if (!object.Equals(BatteryLevelCmd, other.BatteryLevelCmd)) return false;
          if (!object.Equals(RssiLevelCmd, other.RssiLevelCmd)) return false;
          if (MsgCase != other.MsgCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (msgCase_ == MsgOneofCase.VibrateCmd) hash ^= VibrateCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.RotateCmd) hash ^= RotateCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.LinearCmd) hash ^= LinearCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.StopDeviceCmd) hash ^= StopDeviceCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.RawReadCmd) hash ^= RawReadCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.RawWriteCmd) hash ^= RawWriteCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.RawSubscribeCmd) hash ^= RawSubscribeCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.RawUnsubscribeCmd) hash ^= RawUnsubscribeCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.BatteryLevelCmd) hash ^= BatteryLevelCmd.GetHashCode();
          if (msgCase_ == MsgOneofCase.RssiLevelCmd) hash ^= RssiLevelCmd.GetHashCode();
          hash ^= (int) msgCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (msgCase_ == MsgOneofCase.VibrateCmd) {
            output.WriteRawTag(10);
            output.WriteMessage(VibrateCmd);
          }
          if (msgCase_ == MsgOneofCase.RotateCmd) {
            output.WriteRawTag(18);
            output.WriteMessage(RotateCmd);
          }
          if (msgCase_ == MsgOneofCase.LinearCmd) {
            output.WriteRawTag(26);
            output.WriteMessage(LinearCmd);
          }
          if (msgCase_ == MsgOneofCase.StopDeviceCmd) {
            output.WriteRawTag(34);
            output.WriteMessage(StopDeviceCmd);
          }
          if (msgCase_ == MsgOneofCase.RawReadCmd) {
            output.WriteRawTag(42);
            output.WriteMessage(RawReadCmd);
          }
          if (msgCase_ == MsgOneofCase.RawWriteCmd) {
            output.WriteRawTag(50);
            output.WriteMessage(RawWriteCmd);
          }
          if (msgCase_ == MsgOneofCase.RawSubscribeCmd) {
            output.WriteRawTag(58);
            output.WriteMessage(RawSubscribeCmd);
          }
          if (msgCase_ == MsgOneofCase.RawUnsubscribeCmd) {
            output.WriteRawTag(66);
            output.WriteMessage(RawUnsubscribeCmd);
          }
          if (msgCase_ == MsgOneofCase.BatteryLevelCmd) {
            output.WriteRawTag(74);
            output.WriteMessage(BatteryLevelCmd);
          }
          if (msgCase_ == MsgOneofCase.RssiLevelCmd) {
            output.WriteRawTag(82);
            output.WriteMessage(RssiLevelCmd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (msgCase_ == MsgOneofCase.VibrateCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(VibrateCmd);
          }
          if (msgCase_ == MsgOneofCase.RotateCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotateCmd);
          }
          if (msgCase_ == MsgOneofCase.LinearCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearCmd);
          }
          if (msgCase_ == MsgOneofCase.StopDeviceCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopDeviceCmd);
          }
          if (msgCase_ == MsgOneofCase.RawReadCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawReadCmd);
          }
          if (msgCase_ == MsgOneofCase.RawWriteCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawWriteCmd);
          }
          if (msgCase_ == MsgOneofCase.RawSubscribeCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawSubscribeCmd);
          }
          if (msgCase_ == MsgOneofCase.RawUnsubscribeCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawUnsubscribeCmd);
          }
          if (msgCase_ == MsgOneofCase.BatteryLevelCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatteryLevelCmd);
          }
          if (msgCase_ == MsgOneofCase.RssiLevelCmd) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RssiLevelCmd);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FFIMessage other) {
          if (other == null) {
            return;
          }
          switch (other.MsgCase) {
            case MsgOneofCase.VibrateCmd:
              if (VibrateCmd == null) {
                VibrateCmd = new global::Buttplug.DeviceMessage.Types.VibrateCmd();
              }
              VibrateCmd.MergeFrom(other.VibrateCmd);
              break;
            case MsgOneofCase.RotateCmd:
              if (RotateCmd == null) {
                RotateCmd = new global::Buttplug.DeviceMessage.Types.RotateCmd();
              }
              RotateCmd.MergeFrom(other.RotateCmd);
              break;
            case MsgOneofCase.LinearCmd:
              if (LinearCmd == null) {
                LinearCmd = new global::Buttplug.DeviceMessage.Types.LinearCmd();
              }
              LinearCmd.MergeFrom(other.LinearCmd);
              break;
            case MsgOneofCase.StopDeviceCmd:
              if (StopDeviceCmd == null) {
                StopDeviceCmd = new global::Buttplug.DeviceMessage.Types.StopDeviceCmd();
              }
              StopDeviceCmd.MergeFrom(other.StopDeviceCmd);
              break;
            case MsgOneofCase.RawReadCmd:
              if (RawReadCmd == null) {
                RawReadCmd = new global::Buttplug.DeviceMessage.Types.RawReadCmd();
              }
              RawReadCmd.MergeFrom(other.RawReadCmd);
              break;
            case MsgOneofCase.RawWriteCmd:
              if (RawWriteCmd == null) {
                RawWriteCmd = new global::Buttplug.DeviceMessage.Types.RawWriteCmd();
              }
              RawWriteCmd.MergeFrom(other.RawWriteCmd);
              break;
            case MsgOneofCase.RawSubscribeCmd:
              if (RawSubscribeCmd == null) {
                RawSubscribeCmd = new global::Buttplug.DeviceMessage.Types.RawSubscribeCmd();
              }
              RawSubscribeCmd.MergeFrom(other.RawSubscribeCmd);
              break;
            case MsgOneofCase.RawUnsubscribeCmd:
              if (RawUnsubscribeCmd == null) {
                RawUnsubscribeCmd = new global::Buttplug.DeviceMessage.Types.RawUnsubscribeCmd();
              }
              RawUnsubscribeCmd.MergeFrom(other.RawUnsubscribeCmd);
              break;
            case MsgOneofCase.BatteryLevelCmd:
              if (BatteryLevelCmd == null) {
                BatteryLevelCmd = new global::Buttplug.DeviceMessage.Types.BatteryLevelCmd();
              }
              BatteryLevelCmd.MergeFrom(other.BatteryLevelCmd);
              break;
            case MsgOneofCase.RssiLevelCmd:
              if (RssiLevelCmd == null) {
                RssiLevelCmd = new global::Buttplug.DeviceMessage.Types.RSSILevelCmd();
              }
              RssiLevelCmd.MergeFrom(other.RssiLevelCmd);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Buttplug.DeviceMessage.Types.VibrateCmd subBuilder = new global::Buttplug.DeviceMessage.Types.VibrateCmd();
                if (msgCase_ == MsgOneofCase.VibrateCmd) {
                  subBuilder.MergeFrom(VibrateCmd);
                }
                input.ReadMessage(subBuilder);
                VibrateCmd = subBuilder;
                break;
              }
              case 18: {
                global::Buttplug.DeviceMessage.Types.RotateCmd subBuilder = new global::Buttplug.DeviceMessage.Types.RotateCmd();
                if (msgCase_ == MsgOneofCase.RotateCmd) {
                  subBuilder.MergeFrom(RotateCmd);
                }
                input.ReadMessage(subBuilder);
                RotateCmd = subBuilder;
                break;
              }
              case 26: {
                global::Buttplug.DeviceMessage.Types.LinearCmd subBuilder = new global::Buttplug.DeviceMessage.Types.LinearCmd();
                if (msgCase_ == MsgOneofCase.LinearCmd) {
                  subBuilder.MergeFrom(LinearCmd);
                }
                input.ReadMessage(subBuilder);
                LinearCmd = subBuilder;
                break;
              }
              case 34: {
                global::Buttplug.DeviceMessage.Types.StopDeviceCmd subBuilder = new global::Buttplug.DeviceMessage.Types.StopDeviceCmd();
                if (msgCase_ == MsgOneofCase.StopDeviceCmd) {
                  subBuilder.MergeFrom(StopDeviceCmd);
                }
                input.ReadMessage(subBuilder);
                StopDeviceCmd = subBuilder;
                break;
              }
              case 42: {
                global::Buttplug.DeviceMessage.Types.RawReadCmd subBuilder = new global::Buttplug.DeviceMessage.Types.RawReadCmd();
                if (msgCase_ == MsgOneofCase.RawReadCmd) {
                  subBuilder.MergeFrom(RawReadCmd);
                }
                input.ReadMessage(subBuilder);
                RawReadCmd = subBuilder;
                break;
              }
              case 50: {
                global::Buttplug.DeviceMessage.Types.RawWriteCmd subBuilder = new global::Buttplug.DeviceMessage.Types.RawWriteCmd();
                if (msgCase_ == MsgOneofCase.RawWriteCmd) {
                  subBuilder.MergeFrom(RawWriteCmd);
                }
                input.ReadMessage(subBuilder);
                RawWriteCmd = subBuilder;
                break;
              }
              case 58: {
                global::Buttplug.DeviceMessage.Types.RawSubscribeCmd subBuilder = new global::Buttplug.DeviceMessage.Types.RawSubscribeCmd();
                if (msgCase_ == MsgOneofCase.RawSubscribeCmd) {
                  subBuilder.MergeFrom(RawSubscribeCmd);
                }
                input.ReadMessage(subBuilder);
                RawSubscribeCmd = subBuilder;
                break;
              }
              case 66: {
                global::Buttplug.DeviceMessage.Types.RawUnsubscribeCmd subBuilder = new global::Buttplug.DeviceMessage.Types.RawUnsubscribeCmd();
                if (msgCase_ == MsgOneofCase.RawUnsubscribeCmd) {
                  subBuilder.MergeFrom(RawUnsubscribeCmd);
                }
                input.ReadMessage(subBuilder);
                RawUnsubscribeCmd = subBuilder;
                break;
              }
              case 74: {
                global::Buttplug.DeviceMessage.Types.BatteryLevelCmd subBuilder = new global::Buttplug.DeviceMessage.Types.BatteryLevelCmd();
                if (msgCase_ == MsgOneofCase.BatteryLevelCmd) {
                  subBuilder.MergeFrom(BatteryLevelCmd);
                }
                input.ReadMessage(subBuilder);
                BatteryLevelCmd = subBuilder;
                break;
              }
              case 82: {
                global::Buttplug.DeviceMessage.Types.RSSILevelCmd subBuilder = new global::Buttplug.DeviceMessage.Types.RSSILevelCmd();
                if (msgCase_ == MsgOneofCase.RssiLevelCmd) {
                  subBuilder.MergeFrom(RssiLevelCmd);
                }
                input.ReadMessage(subBuilder);
                RssiLevelCmd = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ServerMessage : pb::IMessage<ServerMessage> {
    private static readonly pb::MessageParser<ServerMessage> _parser = new pb::MessageParser<ServerMessage>(() => new ServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buttplug.ButtplugRsFfiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage(ServerMessage other) : this() {
      switch (other.MsgCase) {
        case MsgOneofCase.Ok:
          Ok = other.Ok.Clone();
          break;
        case MsgOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case MsgOneofCase.ScanningFinished:
          ScanningFinished = other.ScanningFinished.Clone();
          break;
        case MsgOneofCase.DeviceAdded:
          DeviceAdded = other.DeviceAdded.Clone();
          break;
        case MsgOneofCase.DeviceRemoved:
          DeviceRemoved = other.DeviceRemoved.Clone();
          break;
        case MsgOneofCase.Disconnect:
          Disconnect = other.Disconnect.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage Clone() {
      return new ServerMessage(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.ServerMessage.Types.Ok Ok {
      get { return msgCase_ == MsgOneofCase.Ok ? (global::Buttplug.ServerMessage.Types.Ok) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Ok;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.ServerMessage.Types.Error Error {
      get { return msgCase_ == MsgOneofCase.Error ? (global::Buttplug.ServerMessage.Types.Error) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Error;
      }
    }

    /// <summary>Field number for the "scanning_finished" field.</summary>
    public const int ScanningFinishedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.ServerMessage.Types.ScanningFinished ScanningFinished {
      get { return msgCase_ == MsgOneofCase.ScanningFinished ? (global::Buttplug.ServerMessage.Types.ScanningFinished) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScanningFinished;
      }
    }

    /// <summary>Field number for the "device_added" field.</summary>
    public const int DeviceAddedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.ServerMessage.Types.DeviceAdded DeviceAdded {
      get { return msgCase_ == MsgOneofCase.DeviceAdded ? (global::Buttplug.ServerMessage.Types.DeviceAdded) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.DeviceAdded;
      }
    }

    /// <summary>Field number for the "device_removed" field.</summary>
    public const int DeviceRemovedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.ServerMessage.Types.DeviceRemoved DeviceRemoved {
      get { return msgCase_ == MsgOneofCase.DeviceRemoved ? (global::Buttplug.ServerMessage.Types.DeviceRemoved) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.DeviceRemoved;
      }
    }

    /// <summary>Field number for the "disconnect" field.</summary>
    public const int DisconnectFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.ServerMessage.Types.Disconnect Disconnect {
      get { return msgCase_ == MsgOneofCase.Disconnect ? (global::Buttplug.ServerMessage.Types.Disconnect) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Disconnect;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      Ok = 1,
      Error = 2,
      ScanningFinished = 3,
      DeviceAdded = 4,
      DeviceRemoved = 5,
      Disconnect = 6,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ok, other.Ok)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(ScanningFinished, other.ScanningFinished)) return false;
      if (!object.Equals(DeviceAdded, other.DeviceAdded)) return false;
      if (!object.Equals(DeviceRemoved, other.DeviceRemoved)) return false;
      if (!object.Equals(Disconnect, other.Disconnect)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msgCase_ == MsgOneofCase.Ok) hash ^= Ok.GetHashCode();
      if (msgCase_ == MsgOneofCase.Error) hash ^= Error.GetHashCode();
      if (msgCase_ == MsgOneofCase.ScanningFinished) hash ^= ScanningFinished.GetHashCode();
      if (msgCase_ == MsgOneofCase.DeviceAdded) hash ^= DeviceAdded.GetHashCode();
      if (msgCase_ == MsgOneofCase.DeviceRemoved) hash ^= DeviceRemoved.GetHashCode();
      if (msgCase_ == MsgOneofCase.Disconnect) hash ^= Disconnect.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.Ok) {
        output.WriteRawTag(10);
        output.WriteMessage(Ok);
      }
      if (msgCase_ == MsgOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
      if (msgCase_ == MsgOneofCase.ScanningFinished) {
        output.WriteRawTag(26);
        output.WriteMessage(ScanningFinished);
      }
      if (msgCase_ == MsgOneofCase.DeviceAdded) {
        output.WriteRawTag(34);
        output.WriteMessage(DeviceAdded);
      }
      if (msgCase_ == MsgOneofCase.DeviceRemoved) {
        output.WriteRawTag(42);
        output.WriteMessage(DeviceRemoved);
      }
      if (msgCase_ == MsgOneofCase.Disconnect) {
        output.WriteRawTag(50);
        output.WriteMessage(Disconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msgCase_ == MsgOneofCase.Ok) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ok);
      }
      if (msgCase_ == MsgOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (msgCase_ == MsgOneofCase.ScanningFinished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanningFinished);
      }
      if (msgCase_ == MsgOneofCase.DeviceAdded) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceAdded);
      }
      if (msgCase_ == MsgOneofCase.DeviceRemoved) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceRemoved);
      }
      if (msgCase_ == MsgOneofCase.Disconnect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disconnect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerMessage other) {
      if (other == null) {
        return;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.Ok:
          if (Ok == null) {
            Ok = new global::Buttplug.ServerMessage.Types.Ok();
          }
          Ok.MergeFrom(other.Ok);
          break;
        case MsgOneofCase.Error:
          if (Error == null) {
            Error = new global::Buttplug.ServerMessage.Types.Error();
          }
          Error.MergeFrom(other.Error);
          break;
        case MsgOneofCase.ScanningFinished:
          if (ScanningFinished == null) {
            ScanningFinished = new global::Buttplug.ServerMessage.Types.ScanningFinished();
          }
          ScanningFinished.MergeFrom(other.ScanningFinished);
          break;
        case MsgOneofCase.DeviceAdded:
          if (DeviceAdded == null) {
            DeviceAdded = new global::Buttplug.ServerMessage.Types.DeviceAdded();
          }
          DeviceAdded.MergeFrom(other.DeviceAdded);
          break;
        case MsgOneofCase.DeviceRemoved:
          if (DeviceRemoved == null) {
            DeviceRemoved = new global::Buttplug.ServerMessage.Types.DeviceRemoved();
          }
          DeviceRemoved.MergeFrom(other.DeviceRemoved);
          break;
        case MsgOneofCase.Disconnect:
          if (Disconnect == null) {
            Disconnect = new global::Buttplug.ServerMessage.Types.Disconnect();
          }
          Disconnect.MergeFrom(other.Disconnect);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Buttplug.ServerMessage.Types.Ok subBuilder = new global::Buttplug.ServerMessage.Types.Ok();
            if (msgCase_ == MsgOneofCase.Ok) {
              subBuilder.MergeFrom(Ok);
            }
            input.ReadMessage(subBuilder);
            Ok = subBuilder;
            break;
          }
          case 18: {
            global::Buttplug.ServerMessage.Types.Error subBuilder = new global::Buttplug.ServerMessage.Types.Error();
            if (msgCase_ == MsgOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 26: {
            global::Buttplug.ServerMessage.Types.ScanningFinished subBuilder = new global::Buttplug.ServerMessage.Types.ScanningFinished();
            if (msgCase_ == MsgOneofCase.ScanningFinished) {
              subBuilder.MergeFrom(ScanningFinished);
            }
            input.ReadMessage(subBuilder);
            ScanningFinished = subBuilder;
            break;
          }
          case 34: {
            global::Buttplug.ServerMessage.Types.DeviceAdded subBuilder = new global::Buttplug.ServerMessage.Types.DeviceAdded();
            if (msgCase_ == MsgOneofCase.DeviceAdded) {
              subBuilder.MergeFrom(DeviceAdded);
            }
            input.ReadMessage(subBuilder);
            DeviceAdded = subBuilder;
            break;
          }
          case 42: {
            global::Buttplug.ServerMessage.Types.DeviceRemoved subBuilder = new global::Buttplug.ServerMessage.Types.DeviceRemoved();
            if (msgCase_ == MsgOneofCase.DeviceRemoved) {
              subBuilder.MergeFrom(DeviceRemoved);
            }
            input.ReadMessage(subBuilder);
            DeviceRemoved = subBuilder;
            break;
          }
          case 50: {
            global::Buttplug.ServerMessage.Types.Disconnect subBuilder = new global::Buttplug.ServerMessage.Types.Disconnect();
            if (msgCase_ == MsgOneofCase.Disconnect) {
              subBuilder.MergeFrom(Disconnect);
            }
            input.ReadMessage(subBuilder);
            Disconnect = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ButtplugErrorType {
        [pbr::OriginalName("ButtplugConnectorError")] ButtplugConnectorError = 0,
        [pbr::OriginalName("ButtplugHandshakeError")] ButtplugHandshakeError = 1,
        [pbr::OriginalName("ButtplugDeviceError")] ButtplugDeviceError = 2,
        [pbr::OriginalName("ButtplugPingError")] ButtplugPingError = 3,
        [pbr::OriginalName("ButtplugMessageError")] ButtplugMessageError = 4,
        [pbr::OriginalName("ButtplugUnknownError")] ButtplugUnknownError = 5,
      }

      public enum MessageAttributeType {
        [pbr::OriginalName("VibrateCmd")] VibrateCmd = 0,
        [pbr::OriginalName("RotateCmd")] RotateCmd = 1,
        [pbr::OriginalName("LinearCmd")] LinearCmd = 2,
        [pbr::OriginalName("StopDeviceCmd")] StopDeviceCmd = 3,
        [pbr::OriginalName("RawReadCmd")] RawReadCmd = 4,
        [pbr::OriginalName("RawWriteCmd")] RawWriteCmd = 5,
        [pbr::OriginalName("RawSubscribeCmd")] RawSubscribeCmd = 6,
        [pbr::OriginalName("RawUnsubscribeCmd")] RawUnsubscribeCmd = 7,
        [pbr::OriginalName("BatteryLevelCmd")] BatteryLevelCmd = 8,
        [pbr::OriginalName("RSSILevelCmd")] RssilevelCmd = 9,
      }

      public sealed partial class MessageAttributes : pb::IMessage<MessageAttributes> {
        private static readonly pb::MessageParser<MessageAttributes> _parser = new pb::MessageParser<MessageAttributes>(() => new MessageAttributes());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MessageAttributes> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ServerMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageAttributes() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageAttributes(MessageAttributes other) : this() {
          messageType_ = other.messageType_;
          featureCount_ = other.featureCount_;
          stepCount_ = other.stepCount_.Clone();
          endpoints_ = other.endpoints_.Clone();
          maxDuration_ = other.maxDuration_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageAttributes Clone() {
          return new MessageAttributes(this);
        }

        /// <summary>Field number for the "message_type" field.</summary>
        public const int MessageTypeFieldNumber = 1;
        private global::Buttplug.ServerMessage.Types.MessageAttributeType messageType_ = global::Buttplug.ServerMessage.Types.MessageAttributeType.VibrateCmd;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ServerMessage.Types.MessageAttributeType MessageType {
          get { return messageType_; }
          set {
            messageType_ = value;
          }
        }

        /// <summary>Field number for the "feature_count" field.</summary>
        public const int FeatureCountFieldNumber = 2;
        private uint featureCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FeatureCount {
          get { return featureCount_; }
          set {
            featureCount_ = value;
          }
        }

        /// <summary>Field number for the "step_count" field.</summary>
        public const int StepCountFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_stepCount_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> stepCount_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> StepCount {
          get { return stepCount_; }
        }

        /// <summary>Field number for the "endpoints" field.</summary>
        public const int EndpointsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Buttplug.Endpoint> _repeated_endpoints_codec
            = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Buttplug.Endpoint) x);
        private readonly pbc::RepeatedField<global::Buttplug.Endpoint> endpoints_ = new pbc::RepeatedField<global::Buttplug.Endpoint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Buttplug.Endpoint> Endpoints {
          get { return endpoints_; }
        }

        /// <summary>Field number for the "max_duration" field.</summary>
        public const int MaxDurationFieldNumber = 5;
        private static readonly pb::FieldCodec<uint> _repeated_maxDuration_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> maxDuration_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// TODO Patterns
        /// TODO Actuator Type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> MaxDuration {
          get { return maxDuration_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MessageAttributes);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MessageAttributes other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MessageType != other.MessageType) return false;
          if (FeatureCount != other.FeatureCount) return false;
          if(!stepCount_.Equals(other.stepCount_)) return false;
          if(!endpoints_.Equals(other.endpoints_)) return false;
          if(!maxDuration_.Equals(other.maxDuration_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MessageType != global::Buttplug.ServerMessage.Types.MessageAttributeType.VibrateCmd) hash ^= MessageType.GetHashCode();
          if (FeatureCount != 0) hash ^= FeatureCount.GetHashCode();
          hash ^= stepCount_.GetHashCode();
          hash ^= endpoints_.GetHashCode();
          hash ^= maxDuration_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MessageType != global::Buttplug.ServerMessage.Types.MessageAttributeType.VibrateCmd) {
            output.WriteRawTag(8);
            output.WriteEnum((int) MessageType);
          }
          if (FeatureCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(FeatureCount);
          }
          stepCount_.WriteTo(output, _repeated_stepCount_codec);
          endpoints_.WriteTo(output, _repeated_endpoints_codec);
          maxDuration_.WriteTo(output, _repeated_maxDuration_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MessageType != global::Buttplug.ServerMessage.Types.MessageAttributeType.VibrateCmd) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
          }
          if (FeatureCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeatureCount);
          }
          size += stepCount_.CalculateSize(_repeated_stepCount_codec);
          size += endpoints_.CalculateSize(_repeated_endpoints_codec);
          size += maxDuration_.CalculateSize(_repeated_maxDuration_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MessageAttributes other) {
          if (other == null) {
            return;
          }
          if (other.MessageType != global::Buttplug.ServerMessage.Types.MessageAttributeType.VibrateCmd) {
            MessageType = other.MessageType;
          }
          if (other.FeatureCount != 0) {
            FeatureCount = other.FeatureCount;
          }
          stepCount_.Add(other.stepCount_);
          endpoints_.Add(other.endpoints_);
          maxDuration_.Add(other.maxDuration_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MessageType = (global::Buttplug.ServerMessage.Types.MessageAttributeType) input.ReadEnum();
                break;
              }
              case 16: {
                FeatureCount = input.ReadUInt32();
                break;
              }
              case 26:
              case 24: {
                stepCount_.AddEntriesFrom(input, _repeated_stepCount_codec);
                break;
              }
              case 34:
              case 32: {
                endpoints_.AddEntriesFrom(input, _repeated_endpoints_codec);
                break;
              }
              case 42:
              case 40: {
                maxDuration_.AddEntriesFrom(input, _repeated_maxDuration_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Ok : pb::IMessage<Ok> {
        private static readonly pb::MessageParser<Ok> _parser = new pb::MessageParser<Ok>(() => new Ok());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Ok> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ServerMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ok() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ok(Ok other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ok Clone() {
          return new Ok(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Ok);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Ok other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Ok other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ServerMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          errorType_ = other.errorType_;
          message_ = other.message_;
          backtrace_ = other.backtrace_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "error_type" field.</summary>
        public const int ErrorTypeFieldNumber = 1;
        private global::Buttplug.ServerMessage.Types.ButtplugErrorType errorType_ = global::Buttplug.ServerMessage.Types.ButtplugErrorType.ButtplugConnectorError;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ServerMessage.Types.ButtplugErrorType ErrorType {
          get { return errorType_; }
          set {
            errorType_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "backtrace" field.</summary>
        public const int BacktraceFieldNumber = 3;
        private string backtrace_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Backtrace {
          get { return backtrace_; }
          set {
            backtrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ErrorType != other.ErrorType) return false;
          if (Message != other.Message) return false;
          if (Backtrace != other.Backtrace) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ErrorType != global::Buttplug.ServerMessage.Types.ButtplugErrorType.ButtplugConnectorError) hash ^= ErrorType.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (Backtrace.Length != 0) hash ^= Backtrace.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ErrorType != global::Buttplug.ServerMessage.Types.ButtplugErrorType.ButtplugConnectorError) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ErrorType);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (Backtrace.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Backtrace);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ErrorType != global::Buttplug.ServerMessage.Types.ButtplugErrorType.ButtplugConnectorError) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorType);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (Backtrace.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Backtrace);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.ErrorType != global::Buttplug.ServerMessage.Types.ButtplugErrorType.ButtplugConnectorError) {
            ErrorType = other.ErrorType;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.Backtrace.Length != 0) {
            Backtrace = other.Backtrace;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ErrorType = (global::Buttplug.ServerMessage.Types.ButtplugErrorType) input.ReadEnum();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 26: {
                Backtrace = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ScanningFinished : pb::IMessage<ScanningFinished> {
        private static readonly pb::MessageParser<ScanningFinished> _parser = new pb::MessageParser<ScanningFinished>(() => new ScanningFinished());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ScanningFinished> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ServerMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanningFinished() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanningFinished(ScanningFinished other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanningFinished Clone() {
          return new ScanningFinished(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ScanningFinished);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ScanningFinished other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ScanningFinished other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class DeviceAdded : pb::IMessage<DeviceAdded> {
        private static readonly pb::MessageParser<DeviceAdded> _parser = new pb::MessageParser<DeviceAdded>(() => new DeviceAdded());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeviceAdded> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ServerMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceAdded() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceAdded(DeviceAdded other) : this() {
          name_ = other.name_;
          index_ = other.index_;
          messageAttributes_ = other.messageAttributes_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceAdded Clone() {
          return new DeviceAdded(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "message_attributes" field.</summary>
        public const int MessageAttributesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Buttplug.ServerMessage.Types.MessageAttributes> _repeated_messageAttributes_codec
            = pb::FieldCodec.ForMessage(26, global::Buttplug.ServerMessage.Types.MessageAttributes.Parser);
        private readonly pbc::RepeatedField<global::Buttplug.ServerMessage.Types.MessageAttributes> messageAttributes_ = new pbc::RepeatedField<global::Buttplug.ServerMessage.Types.MessageAttributes>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Buttplug.ServerMessage.Types.MessageAttributes> MessageAttributes {
          get { return messageAttributes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DeviceAdded);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeviceAdded other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Index != other.Index) return false;
          if(!messageAttributes_.Equals(other.messageAttributes_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          hash ^= messageAttributes_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Index);
          }
          messageAttributes_.WriteTo(output, _repeated_messageAttributes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          size += messageAttributes_.CalculateSize(_repeated_messageAttributes_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeviceAdded other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          messageAttributes_.Add(other.messageAttributes_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Index = input.ReadUInt32();
                break;
              }
              case 26: {
                messageAttributes_.AddEntriesFrom(input, _repeated_messageAttributes_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class DeviceRemoved : pb::IMessage<DeviceRemoved> {
        private static readonly pb::MessageParser<DeviceRemoved> _parser = new pb::MessageParser<DeviceRemoved>(() => new DeviceRemoved());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeviceRemoved> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ServerMessage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceRemoved() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceRemoved(DeviceRemoved other) : this() {
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceRemoved Clone() {
          return new DeviceRemoved(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DeviceRemoved);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeviceRemoved other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeviceRemoved other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Disconnect : pb::IMessage<Disconnect> {
        private static readonly pb::MessageParser<Disconnect> _parser = new pb::MessageParser<Disconnect>(() => new Disconnect());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Disconnect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ServerMessage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect(Disconnect other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect Clone() {
          return new Disconnect(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Disconnect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Disconnect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Disconnect other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DeviceEvent : pb::IMessage<DeviceEvent> {
    private static readonly pb::MessageParser<DeviceEvent> _parser = new pb::MessageParser<DeviceEvent>(() => new DeviceEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buttplug.ButtplugRsFfiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEvent(DeviceEvent other) : this() {
      switch (other.MsgCase) {
        case MsgOneofCase.Disconnect:
          Disconnect = other.Disconnect.Clone();
          break;
        case MsgOneofCase.BatteryLevelReading:
          BatteryLevelReading = other.BatteryLevelReading.Clone();
          break;
        case MsgOneofCase.RssiLevelReading:
          RssiLevelReading = other.RssiLevelReading.Clone();
          break;
        case MsgOneofCase.RawReading:
          RawReading = other.RawReading.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEvent Clone() {
      return new DeviceEvent(this);
    }

    /// <summary>Field number for the "disconnect" field.</summary>
    public const int DisconnectFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.DeviceEvent.Types.Disconnect Disconnect {
      get { return msgCase_ == MsgOneofCase.Disconnect ? (global::Buttplug.DeviceEvent.Types.Disconnect) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Disconnect;
      }
    }

    /// <summary>Field number for the "battery_level_reading" field.</summary>
    public const int BatteryLevelReadingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.DeviceEvent.Types.BatteryLevelReading BatteryLevelReading {
      get { return msgCase_ == MsgOneofCase.BatteryLevelReading ? (global::Buttplug.DeviceEvent.Types.BatteryLevelReading) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BatteryLevelReading;
      }
    }

    /// <summary>Field number for the "rssi_level_reading" field.</summary>
    public const int RssiLevelReadingFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.DeviceEvent.Types.RSSILevelReading RssiLevelReading {
      get { return msgCase_ == MsgOneofCase.RssiLevelReading ? (global::Buttplug.DeviceEvent.Types.RSSILevelReading) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RssiLevelReading;
      }
    }

    /// <summary>Field number for the "raw_reading" field.</summary>
    public const int RawReadingFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.DeviceEvent.Types.RawReading RawReading {
      get { return msgCase_ == MsgOneofCase.RawReading ? (global::Buttplug.DeviceEvent.Types.RawReading) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RawReading;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      Disconnect = 1,
      BatteryLevelReading = 2,
      RssiLevelReading = 3,
      RawReading = 4,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Disconnect, other.Disconnect)) return false;
      if (!object.Equals(BatteryLevelReading, other.BatteryLevelReading)) return false;
      if (!object.Equals(RssiLevelReading, other.RssiLevelReading)) return false;
      if (!object.Equals(RawReading, other.RawReading)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msgCase_ == MsgOneofCase.Disconnect) hash ^= Disconnect.GetHashCode();
      if (msgCase_ == MsgOneofCase.BatteryLevelReading) hash ^= BatteryLevelReading.GetHashCode();
      if (msgCase_ == MsgOneofCase.RssiLevelReading) hash ^= RssiLevelReading.GetHashCode();
      if (msgCase_ == MsgOneofCase.RawReading) hash ^= RawReading.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.Disconnect) {
        output.WriteRawTag(10);
        output.WriteMessage(Disconnect);
      }
      if (msgCase_ == MsgOneofCase.BatteryLevelReading) {
        output.WriteRawTag(18);
        output.WriteMessage(BatteryLevelReading);
      }
      if (msgCase_ == MsgOneofCase.RssiLevelReading) {
        output.WriteRawTag(26);
        output.WriteMessage(RssiLevelReading);
      }
      if (msgCase_ == MsgOneofCase.RawReading) {
        output.WriteRawTag(34);
        output.WriteMessage(RawReading);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msgCase_ == MsgOneofCase.Disconnect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disconnect);
      }
      if (msgCase_ == MsgOneofCase.BatteryLevelReading) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatteryLevelReading);
      }
      if (msgCase_ == MsgOneofCase.RssiLevelReading) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RssiLevelReading);
      }
      if (msgCase_ == MsgOneofCase.RawReading) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawReading);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceEvent other) {
      if (other == null) {
        return;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.Disconnect:
          if (Disconnect == null) {
            Disconnect = new global::Buttplug.DeviceEvent.Types.Disconnect();
          }
          Disconnect.MergeFrom(other.Disconnect);
          break;
        case MsgOneofCase.BatteryLevelReading:
          if (BatteryLevelReading == null) {
            BatteryLevelReading = new global::Buttplug.DeviceEvent.Types.BatteryLevelReading();
          }
          BatteryLevelReading.MergeFrom(other.BatteryLevelReading);
          break;
        case MsgOneofCase.RssiLevelReading:
          if (RssiLevelReading == null) {
            RssiLevelReading = new global::Buttplug.DeviceEvent.Types.RSSILevelReading();
          }
          RssiLevelReading.MergeFrom(other.RssiLevelReading);
          break;
        case MsgOneofCase.RawReading:
          if (RawReading == null) {
            RawReading = new global::Buttplug.DeviceEvent.Types.RawReading();
          }
          RawReading.MergeFrom(other.RawReading);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Buttplug.DeviceEvent.Types.Disconnect subBuilder = new global::Buttplug.DeviceEvent.Types.Disconnect();
            if (msgCase_ == MsgOneofCase.Disconnect) {
              subBuilder.MergeFrom(Disconnect);
            }
            input.ReadMessage(subBuilder);
            Disconnect = subBuilder;
            break;
          }
          case 18: {
            global::Buttplug.DeviceEvent.Types.BatteryLevelReading subBuilder = new global::Buttplug.DeviceEvent.Types.BatteryLevelReading();
            if (msgCase_ == MsgOneofCase.BatteryLevelReading) {
              subBuilder.MergeFrom(BatteryLevelReading);
            }
            input.ReadMessage(subBuilder);
            BatteryLevelReading = subBuilder;
            break;
          }
          case 26: {
            global::Buttplug.DeviceEvent.Types.RSSILevelReading subBuilder = new global::Buttplug.DeviceEvent.Types.RSSILevelReading();
            if (msgCase_ == MsgOneofCase.RssiLevelReading) {
              subBuilder.MergeFrom(RssiLevelReading);
            }
            input.ReadMessage(subBuilder);
            RssiLevelReading = subBuilder;
            break;
          }
          case 34: {
            global::Buttplug.DeviceEvent.Types.RawReading subBuilder = new global::Buttplug.DeviceEvent.Types.RawReading();
            if (msgCase_ == MsgOneofCase.RawReading) {
              subBuilder.MergeFrom(RawReading);
            }
            input.ReadMessage(subBuilder);
            RawReading = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeviceEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Disconnect : pb::IMessage<Disconnect> {
        private static readonly pb::MessageParser<Disconnect> _parser = new pb::MessageParser<Disconnect>(() => new Disconnect());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Disconnect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect(Disconnect other) : this() {
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Disconnect Clone() {
          return new Disconnect(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Disconnect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Disconnect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Disconnect other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RawReading : pb::IMessage<RawReading> {
        private static readonly pb::MessageParser<RawReading> _parser = new pb::MessageParser<RawReading>(() => new RawReading());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RawReading> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawReading() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawReading(RawReading other) : this() {
          index_ = other.index_;
          endpoint_ = other.endpoint_;
          data_ = other.data_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawReading Clone() {
          return new RawReading(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "endpoint" field.</summary>
        public const int EndpointFieldNumber = 2;
        private global::Buttplug.Endpoint endpoint_ = global::Buttplug.Endpoint.Command;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.Endpoint Endpoint {
          get { return endpoint_; }
          set {
            endpoint_ = value;
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 3;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RawReading);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RawReading other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (Endpoint != other.Endpoint) return false;
          if (Data != other.Data) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Endpoint != global::Buttplug.Endpoint.Command) hash ^= Endpoint.GetHashCode();
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Endpoint);
          }
          if (Data.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Data);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Endpoint != global::Buttplug.Endpoint.Command) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Endpoint);
          }
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RawReading other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Endpoint != global::Buttplug.Endpoint.Command) {
            Endpoint = other.Endpoint;
          }
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Endpoint = (global::Buttplug.Endpoint) input.ReadEnum();
                break;
              }
              case 26: {
                Data = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BatteryLevelReading : pb::IMessage<BatteryLevelReading> {
        private static readonly pb::MessageParser<BatteryLevelReading> _parser = new pb::MessageParser<BatteryLevelReading>(() => new BatteryLevelReading());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BatteryLevelReading> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceEvent.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatteryLevelReading() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatteryLevelReading(BatteryLevelReading other) : this() {
          index_ = other.index_;
          reading_ = other.reading_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatteryLevelReading Clone() {
          return new BatteryLevelReading(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "reading" field.</summary>
        public const int ReadingFieldNumber = 2;
        private double reading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Reading {
          get { return reading_; }
          set {
            reading_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BatteryLevelReading);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BatteryLevelReading other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Reading, other.Reading)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Reading != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Reading);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Reading != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Reading);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Reading != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BatteryLevelReading other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Reading != 0D) {
            Reading = other.Reading;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 17: {
                Reading = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RSSILevelReading : pb::IMessage<RSSILevelReading> {
        private static readonly pb::MessageParser<RSSILevelReading> _parser = new pb::MessageParser<RSSILevelReading>(() => new RSSILevelReading());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RSSILevelReading> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.DeviceEvent.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RSSILevelReading() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RSSILevelReading(RSSILevelReading other) : this() {
          index_ = other.index_;
          reading_ = other.reading_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RSSILevelReading Clone() {
          return new RSSILevelReading(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "reading" field.</summary>
        public const int ReadingFieldNumber = 2;
        private int reading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Reading {
          get { return reading_; }
          set {
            reading_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RSSILevelReading);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RSSILevelReading other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (Reading != other.Reading) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Reading != 0) hash ^= Reading.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Reading != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Reading);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Reading != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reading);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RSSILevelReading other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Reading != 0) {
            Reading = other.Reading;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Reading = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ButtplugFFIServerMessage : pb::IMessage<ButtplugFFIServerMessage> {
    private static readonly pb::MessageParser<ButtplugFFIServerMessage> _parser = new pb::MessageParser<ButtplugFFIServerMessage>(() => new ButtplugFFIServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ButtplugFFIServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buttplug.ButtplugRsFfiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ButtplugFFIServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ButtplugFFIServerMessage(ButtplugFFIServerMessage other) : this() {
      id_ = other.id_;
      message_ = other.message_ != null ? other.message_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ButtplugFFIServerMessage Clone() {
      return new ButtplugFFIServerMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private global::Buttplug.ButtplugFFIServerMessage.Types.FFIMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Buttplug.ButtplugFFIServerMessage.Types.FFIMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ButtplugFFIServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ButtplugFFIServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Message, other.Message)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (message_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ButtplugFFIServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          Message = new global::Buttplug.ButtplugFFIServerMessage.Types.FFIMessage();
        }
        Message.MergeFrom(other.Message);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (message_ == null) {
              Message = new global::Buttplug.ButtplugFFIServerMessage.Types.FFIMessage();
            }
            input.ReadMessage(Message);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ButtplugFFIServerMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FFIMessage : pb::IMessage<FFIMessage> {
        private static readonly pb::MessageParser<FFIMessage> _parser = new pb::MessageParser<FFIMessage>(() => new FFIMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FFIMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Buttplug.ButtplugFFIServerMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage(FFIMessage other) : this() {
          switch (other.MsgCase) {
            case MsgOneofCase.ServerMessage:
              ServerMessage = other.ServerMessage.Clone();
              break;
            case MsgOneofCase.DeviceEvent:
              DeviceEvent = other.DeviceEvent.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FFIMessage Clone() {
          return new FFIMessage(this);
        }

        /// <summary>Field number for the "server_message" field.</summary>
        public const int ServerMessageFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.ServerMessage ServerMessage {
          get { return msgCase_ == MsgOneofCase.ServerMessage ? (global::Buttplug.ServerMessage) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ServerMessage;
          }
        }

        /// <summary>Field number for the "device_event" field.</summary>
        public const int DeviceEventFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Buttplug.DeviceEvent DeviceEvent {
          get { return msgCase_ == MsgOneofCase.DeviceEvent ? (global::Buttplug.DeviceEvent) msg_ : null; }
          set {
            msg_ = value;
            msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.DeviceEvent;
          }
        }

        private object msg_;
        /// <summary>Enum of possible cases for the "msg" oneof.</summary>
        public enum MsgOneofCase {
          None = 0,
          ServerMessage = 1,
          DeviceEvent = 2,
        }
        private MsgOneofCase msgCase_ = MsgOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MsgOneofCase MsgCase {
          get { return msgCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMsg() {
          msgCase_ = MsgOneofCase.None;
          msg_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FFIMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FFIMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ServerMessage, other.ServerMessage)) return false;
          if (!object.Equals(DeviceEvent, other.DeviceEvent)) return false;
          if (MsgCase != other.MsgCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (msgCase_ == MsgOneofCase.ServerMessage) hash ^= ServerMessage.GetHashCode();
          if (msgCase_ == MsgOneofCase.DeviceEvent) hash ^= DeviceEvent.GetHashCode();
          hash ^= (int) msgCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (msgCase_ == MsgOneofCase.ServerMessage) {
            output.WriteRawTag(10);
            output.WriteMessage(ServerMessage);
          }
          if (msgCase_ == MsgOneofCase.DeviceEvent) {
            output.WriteRawTag(18);
            output.WriteMessage(DeviceEvent);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (msgCase_ == MsgOneofCase.ServerMessage) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerMessage);
          }
          if (msgCase_ == MsgOneofCase.DeviceEvent) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceEvent);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FFIMessage other) {
          if (other == null) {
            return;
          }
          switch (other.MsgCase) {
            case MsgOneofCase.ServerMessage:
              if (ServerMessage == null) {
                ServerMessage = new global::Buttplug.ServerMessage();
              }
              ServerMessage.MergeFrom(other.ServerMessage);
              break;
            case MsgOneofCase.DeviceEvent:
              if (DeviceEvent == null) {
                DeviceEvent = new global::Buttplug.DeviceEvent();
              }
              DeviceEvent.MergeFrom(other.DeviceEvent);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Buttplug.ServerMessage subBuilder = new global::Buttplug.ServerMessage();
                if (msgCase_ == MsgOneofCase.ServerMessage) {
                  subBuilder.MergeFrom(ServerMessage);
                }
                input.ReadMessage(subBuilder);
                ServerMessage = subBuilder;
                break;
              }
              case 18: {
                global::Buttplug.DeviceEvent subBuilder = new global::Buttplug.DeviceEvent();
                if (msgCase_ == MsgOneofCase.DeviceEvent) {
                  subBuilder.MergeFrom(DeviceEvent);
                }
                input.ReadMessage(subBuilder);
                DeviceEvent = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
